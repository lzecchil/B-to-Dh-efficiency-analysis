{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "592c7e2d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "Booking all histograms...\n",
      "Triggering event loop to fill all histograms...\n",
      "Retrieving histogram for d1_num_pt...\n",
      "Retrieving histogram for d2_num_pt...\n",
      "Retrieving histogram for d3_num_pt...\n",
      "Retrieving histogram for d1_den_pt...\n",
      "Retrieving histogram for d2_den_pt...\n",
      "Retrieving histogram for d3_den_pt...\n",
      "Retrieving histogram for d1_dr...\n",
      "Retrieving histogram for d2_dr...\n",
      "Retrieving histogram for d3_dr...\n",
      "Retrieving histogram for B_num_pt...\n",
      "Retrieving histogram for D_num_pt...\n",
      "Retrieving histogram for B_den_pt...\n",
      "Retrieving histogram for D_den_pt...\n",
      "Retrieving histogram for B_dr...\n",
      "Retrieving histogram for D_dr...\n",
      "Retrieving histogram for B_M...\n",
      "Retrieving histogram for D_M...\n",
      "Retrieving histogram for d1_pt...\n",
      "Retrieving histogram for d2_pt...\n",
      "Retrieving histogram for d3_pt...\n",
      "Retrieving histogram for d1_eta...\n",
      "Retrieving histogram for d2_eta...\n",
      "Retrieving histogram for d3_eta...\n",
      "Retrieving histogram for d1_phi...\n",
      "Retrieving histogram for d2_phi...\n",
      "Retrieving histogram for d3_phi...\n",
      "Saving histograms to file...\n",
      "All histograms saved in histogramsKpiK.root\n",
      "Tempo di esecuzione: 552.139 secondi\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "input_line_211:21:22: error: redefinition of 'matching_m'\n",
      "std::vector<Matched> matching_m(const RVec<float>& g_eta, const RVec<float>& g_phi, const RVec<float>& g_pt, const RVec<float>& g_mass, const RVec<int>& g_midx,\n",
      "                     ^\n",
      "input_line_70:21:22: note: previous definition is here\n",
      "std::vector<Matched> matching_m(const RVec<float>& g_eta, const RVec<float>& g_phi, const RVec<float>& g_pt, const RVec<float>& g_mass, const RVec<int>& g_midx,\n",
      "                     ^\n",
      "input_line_211:45:6: error: redefinition of 'matching_func'\n",
      "void matching_func(std::vector<GenParticle>& Gp, std::vector<PtEtaPhiMVector>& Tp,\n",
      "     ^\n",
      "input_line_70:45:6: note: previous definition is here\n",
      "void matching_func(std::vector<GenParticle>& Gp, std::vector<PtEtaPhiMVector>& Tp,\n",
      "     ^\n",
      "input_line_211:128:26: error: redefinition of 'main_func'\n",
      "std::vector<RVec<float>> main_func(const RVec<float>& g_pt, const RVec<float>& g_eta, const RVec<float>& g_phi, const RVec<float>& g_mass,\n",
      "                         ^\n",
      "input_line_70:128:26: note: previous definition is here\n",
      "std::vector<RVec<float>> main_func(const RVec<float>& g_pt, const RVec<float>& g_eta, const RVec<float>& g_phi, const RVec<float>& g_mass,\n",
      "                         ^\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "start = time.time()\n",
    "import os\n",
    "import ROOT\n",
    "from ROOT import RDataFrame, RVec\n",
    "from ROOT import TChain, TSelector, TTree, TH1F, TCanvas, TFile, TEfficiency, TLegend\n",
    "from ROOT import Math\n",
    "from ROOT import TLorentzVector\n",
    "from ROOT import TVector3\n",
    "from array import array\n",
    "import numpy as np\n",
    "\n",
    "# Reset ROOT interpreter to avoid redefinition errors\n",
    "ROOT.gInterpreter.Reset()\n",
    "\n",
    "ROOT.EnableImplicitMT()\n",
    "print(ROOT.ROOT.IsImplicitMTEnabled())\n",
    "ROOT.gROOT.SetBatch(ROOT.kTRUE)  # Keep batch mode for non-interactive environments\n",
    "folder=\"/eos/user/f/fsimone/B_Dh_summerproject/bphnano/B_to_DK_KpiK_Run3Summer24NanoAOD_v0_2025Aug27/B_to_DK_KpiK__TuneCP5_13p6TeV_pythia8_Run3Summer24GS_v1/B_to_DK_KpiK__Run3Summer24NanoAOD_v0/250827_105043/\"\n",
    "tree=TChain(\"Events\")\n",
    "for fol,subfolders,files in os.walk(folder):\n",
    "    for file in files:\n",
    "        if file.endswith(\".root\"):\n",
    "            tree.Add(fol+\"/\"+file)\n",
    "\n",
    "\n",
    "df = RDataFrame(tree)\n",
    "decay=\"KpiK\"\n",
    "id1 = 321\n",
    "id2 = -211\n",
    "id3 = 321\n",
    "t = False  # Set to False to bypass muon selection\n",
    "th1 = 0.01\n",
    "th2 = 0.01\n",
    "th3 = 0.01\n",
    "\n",
    "cpp_code = \"\"\"\n",
    "#include <ROOT/RVec.hxx>\n",
    "#include <Math/Vector4Dfwd.h>\n",
    "#include <Math/VectorUtil.h>\n",
    "#include <TDatabasePDG.h>\n",
    "#include <TMath.h>\n",
    "#include <map>\n",
    "#include <set>\n",
    "#include <tuple>\n",
    "#include <vector>\n",
    "#include <algorithm>\n",
    "#include <iterator>\n",
    "\n",
    "using namespace ROOT;\n",
    "using namespace ROOT::Math;\n",
    "\n",
    "using PtEtaPhiMVector = ROOT::Math::PtEtaPhiMVector;\n",
    "using GenParticle = std::tuple<PtEtaPhiMVector, int, int, float, float>;\n",
    "using Matched = std::tuple<PtEtaPhiMVector, int, PtEtaPhiMVector>;\n",
    "\n",
    "std::vector<Matched> matching_m(const RVec<float>& g_eta, const RVec<float>& g_phi, const RVec<float>& g_pt, const RVec<float>& g_mass, const RVec<int>& g_midx,\n",
    "                                const std::vector<Matched>& p, const std::vector<Matched>& m,\n",
    "                                RVec<float>& hDen, RVec<float>& hNum, RVec<float>& hdR, float th, RVec<float>& hIM) {\n",
    "    std::vector<Matched> matches;\n",
    "    for (const auto& plus : p) {\n",
    "        for (const auto& minus_ : m) {\n",
    "            if (std::get<1>(plus) == std::get<1>(minus_)) {\n",
    "                int idx = std::get<1>(plus);\n",
    "                PtEtaPhiMVector GenMother(g_pt[idx], g_eta[idx], g_phi[idx], g_mass[idx]);\n",
    "                PtEtaPhiMVector RecoMother = std::get<2>(plus) + std::get<2>(minus_);\n",
    "                float dr = VectorUtil::DeltaR(GenMother, RecoMother);\n",
    "                hIM.push_back(RecoMother.M());\n",
    "                hdR.push_back(dr);\n",
    "                if (dr < th) {\n",
    "                    hNum.push_back(g_pt[idx]);\n",
    "                    matches.emplace_back(GenMother, g_midx[idx], RecoMother);\n",
    "                }\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "    return matches;\n",
    "}\n",
    "\n",
    "// ****** CORREZIONE 1: Aggiunti id1, id2, id3 alla firma della funzione ******\n",
    "void matching_func(std::vector<GenParticle>& Gp, std::vector<PtEtaPhiMVector>& Tp,\n",
    "                   RVec<float>& d1_num_pt, RVec<float>& d2_num_pt, RVec<float>& d3_num_pt,\n",
    "                   RVec<float>& d1_num_d, RVec<float>& d2_num_d, RVec<float>& d3_num_d,\n",
    "                   RVec<float>& d1_dr, RVec<float>& d2_dr, RVec<float>& d3_dr,\n",
    "                   std::vector<Matched>& m1, std::vector<Matched>& m2, std::vector<Matched>& m3,\n",
    "                   float th1, float th2, float th3, int id1, int id2, int id3) {\n",
    "    TDatabasePDG *pdg_db = TDatabasePDG::Instance();\n",
    "    bool go = true;\n",
    "    while (go) {\n",
    "        go = false;\n",
    "        std::map<int, std::set<std::pair<int, float>>> match_map;\n",
    "        int i = 0;\n",
    "        while (i < Gp.size()) {\n",
    "            float dR0 = 1000.0f;\n",
    "            int idx = 0;\n",
    "            for (int j = 0; j < Tp.size(); ++j) {\n",
    "                float dR = VectorUtil::DeltaR(std::get<0>(Gp[i]), Tp[j]);\n",
    "                if (dR < dR0) {\n",
    "                    dR0 = dR;\n",
    "                    idx = j;\n",
    "                }\n",
    "            }\n",
    "            int typ = std::get<2>(Gp[i]);\n",
    "            float th = (typ == 1 ? th1 : (typ == 2 ? th2 : th3));\n",
    "            if (dR0 < th) {\n",
    "                auto& s = match_map[idx];\n",
    "                s.emplace(i, dR0);\n",
    "                if (s.size() > 1) go = true;\n",
    "                ++i;\n",
    "            } else {\n",
    "                if (typ == 1) d1_dr.push_back(dR0);\n",
    "                else if (typ == 2) d2_dr.push_back(dR0);\n",
    "                else d3_dr.push_back(dR0);\n",
    "                Gp.erase(Gp.begin() + i);\n",
    "            }\n",
    "        }\n",
    "        std::vector<int> l_g, l_t;\n",
    "        for (const auto& kv : match_map) {\n",
    "            int e = kv.first;\n",
    "            const auto& s = kv.second;\n",
    "            float dr = 1000.0f;\n",
    "            int ind = 0;\n",
    "            for (const auto& el : s) {\n",
    "                if (el.second < dr) {\n",
    "                    dr = el.second;\n",
    "                    ind = el.first;\n",
    "                }\n",
    "            }\n",
    "            int typ = std::get<2>(Gp[ind]);\n",
    "            // Ora questa riga funziona perchÃ© id1, id2, id3 sono noti alla funzione\n",
    "            int pdgid = (typ == 1) ? id1 : ((typ == 2) ? id2 : id3);\n",
    "            double mass = pdg_db->GetParticle(pdgid)->Mass();\n",
    "            Tp[e] = PtEtaPhiMVector(Tp[e].Pt(), Tp[e].Eta(), Tp[e].Phi(), mass);\n",
    "            if (typ == 1) {\n",
    "                d1_num_pt.push_back(std::get<3>(Gp[ind]));\n",
    "                d1_dr.push_back(dr);\n",
    "                d1_num_d.push_back(std::get<4>(Gp[ind]));\n",
    "                m1.emplace_back(std::get<0>(Gp[ind]), std::get<1>(Gp[ind]), Tp[e]);\n",
    "            } else if (typ == 2) {\n",
    "                d2_num_pt.push_back(std::get<3>(Gp[ind]));\n",
    "                d2_dr.push_back(dr);\n",
    "                d2_num_d.push_back(std::get<4>(Gp[ind]));\n",
    "                m2.emplace_back(std::get<0>(Gp[ind]), std::get<1>(Gp[ind]), Tp[e]);\n",
    "            } else {\n",
    "                d3_num_pt.push_back(std::get<3>(Gp[ind]));\n",
    "                d3_dr.push_back(dr);\n",
    "                d3_num_d.push_back(std::get<4>(Gp[ind]));\n",
    "                m3.emplace_back(std::get<0>(Gp[ind]), std::get<1>(Gp[ind]), Tp[e]);\n",
    "            }\n",
    "            l_g.push_back(ind);\n",
    "            l_t.push_back(e);\n",
    "        }\n",
    "        std::sort(l_g.begin(), l_g.end(), std::greater<int>());\n",
    "        std::sort(l_t.begin(), l_t.end(), std::greater<int>());\n",
    "        for (auto eg : l_g) {\n",
    "            Gp.erase(Gp.begin() + eg);\n",
    "        }\n",
    "        for (auto et : l_t) {\n",
    "            Tp.erase(Tp.begin() + et);\n",
    "        }\n",
    "    }\n",
    "}\n",
    "\n",
    "std::vector<RVec<float>> main_func(const RVec<float>& g_pt, const RVec<float>& g_eta, const RVec<float>& g_phi, const RVec<float>& g_mass,\n",
    "                                   const RVec<int>& g_id, const RVec<int>& st, const RVec<int>& g_midx,\n",
    "                                   const RVec<float>& t_pt, const RVec<float>& t_eta, const RVec<float>& t_phi, const RVec<int>& t_ch, const RVec<float>& t_mass,\n",
    "                                   const RVec<float>& g_vx, const RVec<float>& g_vy, const RVec<float>& g_vz,\n",
    "                                   const RVec<float>& m_eta, const RVec<float>& m_pt, bool t_opt, int id1, int id2, int id3, float th1, float th2, float th3) {\n",
    "    TDatabasePDG *pdg = TDatabasePDG::Instance();\n",
    "    std::map<int, std::vector<GenParticle>> d;\n",
    "    std::vector<GenParticle> Gp, Gm;\n",
    "    RVec<float> d1_num_pt, d2_num_pt, d3_num_pt, d1_num_d, d2_num_d, d3_num_d, d1_den_pt, d2_den_pt, d3_den_pt, d1_den_d, d2_den_d, d3_den_d, d1_dr, d2_dr, d3_dr;\n",
    "    RVec<float> B_num_pt, D_num_pt, B_den_pt, D_den_pt, B_dr, D_dr, B_M, D_M;\n",
    "    RVec<float> d1_eta, d2_eta, d3_eta, d1_phi, d2_phi, d3_phi, d1_pt, d2_pt, d3_pt;\n",
    "    bool go = false;\n",
    "    if (t_opt) {\n",
    "        for (size_t im = 0; im < m_eta.size(); ++im) {\n",
    "            if (std::abs(m_eta[im]) < 1.5 && m_pt[im] > 9) {\n",
    "                go = true;\n",
    "                break;\n",
    "            }\n",
    "        }\n",
    "    } else {\n",
    "        go = true;\n",
    "    }\n",
    "    for (size_t i = 0; i < g_id.size(); ++i) {\n",
    "        if (st[i] == 1) {\n",
    "            int midx = g_midx[i];\n",
    "            if (g_id[i] == id1 && std::abs(g_id[midx]) == 421) {\n",
    "                int gmidx = g_midx[midx];\n",
    "                if (std::abs(g_id[gmidx]) == 521) {\n",
    "                    PtEtaPhiMVector GenP(g_pt[i], g_eta[i], g_phi[i], pdg->GetParticle(g_id[i])->Mass());\n",
    "                    float dist = TMath::Sqrt(g_vx[i] * g_vx[i] + g_vy[i] * g_vy[i] + g_vz[i] * g_vz[i]);\n",
    "                    d[gmidx].emplace_back(GenP, midx, 1, g_pt[i], dist);\n",
    "                }\n",
    "            } else if (g_id[i] == id2 && std::abs(g_id[midx]) == 421) {\n",
    "                int gmidx = g_midx[midx];\n",
    "                if (std::abs(g_id[gmidx]) == 521) {\n",
    "                    PtEtaPhiMVector GenP(g_pt[i], g_eta[i], g_phi[i], pdg->GetParticle(g_id[i])->Mass());\n",
    "                    float dist = TMath::Sqrt(g_vx[i] * g_vx[i] + g_vy[i] * g_vy[i] + g_vz[i] * g_vz[i]);\n",
    "                    d[gmidx].emplace_back(GenP, midx, 2, g_pt[i], dist);\n",
    "                }\n",
    "            } else if (g_id[i] == -id3 && g_id[midx] == -521) {\n",
    "                PtEtaPhiMVector GenP(g_pt[i], g_eta[i], g_phi[i], pdg->GetParticle(g_id[i])->Mass());\n",
    "                float dist = TMath::Sqrt(g_vx[i] * g_vx[i] + g_vy[i] * g_vy[i] + g_vz[i] * g_vz[i]);\n",
    "                d[midx].emplace_back(GenP, midx, 3, g_pt[i], dist);\n",
    "            } else if (g_id[i] == id3 && g_id[midx] == 521) {\n",
    "                PtEtaPhiMVector GenP(g_pt[i], g_eta[i], g_phi[i], pdg->GetParticle(g_id[i])->Mass());\n",
    "                float dist = TMath::Sqrt(g_vx[i] * g_vx[i] + g_vy[i] * g_vy[i] + g_vz[i] * g_vz[i]);\n",
    "                d[midx].emplace_back(GenP, midx, 3, g_pt[i], dist);\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "    for (const auto& pair : d) {\n",
    "        int B = pair.first;\n",
    "        const auto& parts = pair.second;\n",
    "        if (parts.size() == 3) {\n",
    "            for (const auto& e : parts) {\n",
    "                int typ = std::get<2>(e);\n",
    "                if (typ == 1) {\n",
    "                    B_den_pt.push_back(g_pt[B]);\n",
    "                    D_den_pt.push_back(g_pt[std::get<1>(e)]);\n",
    "                    d1_den_pt.push_back(std::get<3>(e));\n",
    "                    d1_den_d.push_back(std::get<4>(e));\n",
    "                    Gp.push_back(e);\n",
    "                } else if (typ == 2) {\n",
    "                    d2_den_pt.push_back(std::get<3>(e));\n",
    "                    d2_den_d.push_back(std::get<4>(e));\n",
    "                    Gm.push_back(e);\n",
    "                } else {\n",
    "                    d3_den_pt.push_back(std::get<3>(e));\n",
    "                    d3_den_d.push_back(std::get<4>(e));\n",
    "                    if (g_id[B] > 0) {\n",
    "                        Gp.push_back(e);\n",
    "                    } else {\n",
    "                        Gm.push_back(e);\n",
    "                    }\n",
    "                }\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "    if (go) {\n",
    "        std::vector<PtEtaPhiMVector> Tp, Tm;\n",
    "        for (size_t it = 0; it < t_ch.size(); ++it) {\n",
    "            PtEtaPhiMVector Track(t_pt[it], t_eta[it], t_phi[it], t_mass[it]);\n",
    "            if (t_ch[it] == 1) Tp.push_back(Track);\n",
    "            else if (t_ch[it] == -1) Tm.push_back(Track);\n",
    "        }\n",
    "        std::vector<Matched> m1a, m2a, m3a;\n",
    "        // ****** CORREZIONE 2: Passa id1, id2, id3 alla funzione ******\n",
    "        matching_func(Gp, Tp, d1_num_pt, d2_num_pt, d3_num_pt, d1_num_d, d2_num_d, d3_num_d, d1_dr, d2_dr, d3_dr, m1a, m2a, m3a, th1, th2, th3, id1, id2, id3);\n",
    "        std::vector<Matched> m1b, m2b, m3b;\n",
    "        // ****** CORREZIONE 3: Passa id1, id2, id3 anche alla seconda chiamata ******\n",
    "        matching_func(Gm, Tm, d1_num_pt, d2_num_pt, d3_num_pt, d1_num_d, d2_num_d, d3_num_d, d1_dr, d2_dr, d3_dr, m1b, m2b, m3b, th1, th2, th3, id1, id2, id3);\n",
    "        \n",
    "        std::vector<Matched> m1; m1.reserve(m1a.size() + m1b.size()); m1.insert(m1.end(), m1a.begin(), m1a.end()); m1.insert(m1.end(), m1b.begin(), m1b.end());\n",
    "        std::vector<Matched> m2; m2.reserve(m2a.size() + m2b.size()); m2.insert(m2.end(), m2a.begin(), m2a.end()); m2.insert(m2.end(), m2b.begin(), m2b.end());\n",
    "        std::vector<Matched> m3; m3.reserve(m3a.size() + m3b.size()); m3.insert(m3.end(), m3a.begin(), m3a.end()); m3.insert(m3.end(), m3b.begin(), m3b.end());\n",
    "        for (const auto& e : m1) {\n",
    "            const auto& reco = std::get<2>(e);\n",
    "            d1_pt.push_back(reco.Pt());\n",
    "            d1_eta.push_back(reco.Eta());\n",
    "            d1_phi.push_back(reco.Phi());\n",
    "        }\n",
    "        for (const auto& e : m2) {\n",
    "            const auto& reco = std::get<2>(e);\n",
    "            d2_pt.push_back(reco.Pt());\n",
    "            d2_eta.push_back(reco.Eta());\n",
    "            d2_phi.push_back(reco.Phi());\n",
    "        }\n",
    "        for (const auto& e : m3) {\n",
    "            const auto& reco = std::get<2>(e);\n",
    "            d3_pt.push_back(reco.Pt());\n",
    "            d3_eta.push_back(reco.Eta());\n",
    "            d3_phi.push_back(reco.Phi());\n",
    "        }\n",
    "        std::vector<Matched> mD = matching_m(g_eta, g_phi, g_pt, g_mass, g_midx, m1, m2, D_den_pt, D_num_pt, D_dr, 0.05f, D_M);\n",
    "        std::vector<Matched> mB = matching_m(g_eta, g_phi, g_pt, g_mass, g_midx, mD, m3, B_den_pt, B_num_pt, B_dr, 0.05f, B_M);\n",
    "    }\n",
    "    std::vector<RVec<float>> results;\n",
    "    results.reserve(32);\n",
    "    results.push_back(d1_num_pt);\n",
    "    results.push_back(d2_num_pt);\n",
    "    results.push_back(d3_num_pt);\n",
    "    results.push_back(d1_num_d);\n",
    "    results.push_back(d2_num_d);\n",
    "    results.push_back(d3_num_d);\n",
    "    results.push_back(d1_den_pt);\n",
    "    results.push_back(d2_den_pt);\n",
    "    results.push_back(d3_den_pt);\n",
    "    results.push_back(d1_den_d);\n",
    "    results.push_back(d2_den_d);\n",
    "    results.push_back(d3_den_d);\n",
    "    results.push_back(d1_dr);\n",
    "    results.push_back(d2_dr);\n",
    "    results.push_back(d3_dr);\n",
    "    results.push_back(B_num_pt);\n",
    "    results.push_back(D_num_pt);\n",
    "    results.push_back(B_den_pt);\n",
    "    results.push_back(D_den_pt);\n",
    "    results.push_back(B_dr);\n",
    "    results.push_back(D_dr);\n",
    "    results.push_back(B_M);\n",
    "    results.push_back(D_M);\n",
    "    results.push_back(d1_eta);\n",
    "    results.push_back(d2_eta);\n",
    "    results.push_back(d3_eta);\n",
    "    results.push_back(d1_phi);\n",
    "    results.push_back(d2_phi);\n",
    "    results.push_back(d3_phi);\n",
    "    results.push_back(d1_pt);\n",
    "    results.push_back(d2_pt);\n",
    "    results.push_back(d3_pt);\n",
    "    return results;\n",
    "}\n",
    "\"\"\"\n",
    "\n",
    "# Declare the C++ code\n",
    "ROOT.gInterpreter.Declare(cpp_code)\n",
    "\n",
    "# Define the RDataFrame with the correct number of arguments\n",
    "df1 = df.Define(\"results\", \"main_func(GenPart_pt, GenPart_eta, GenPart_phi, GenPart_mass, GenPart_pdgId, GenPart_status, GenPart_genPartIdxMother, Track_pt, Track_eta, Track_phi, Track_charge, Track_mass, GenPart_vx, GenPart_vy, GenPart_vz, AllMuon_eta, AllMuon_pt, {}, {}, {}, {}, {}, {}, {})\".format(1 if t else 0, id1, id2, id3, th1, th2, th3)) \\\n",
    "        .Define(\"d1_num_pt\", \"results[0]\") \\\n",
    "        .Define(\"d2_num_pt\", \"results[1]\") \\\n",
    "        .Define(\"d3_num_pt\", \"results[2]\") \\\n",
    "        .Define(\"d1_num_d\", \"results[3]\") \\\n",
    "        .Define(\"d2_num_d\", \"results[4]\") \\\n",
    "        .Define(\"d3_num_d\", \"results[5]\") \\\n",
    "        .Define(\"d1_den_pt\", \"results[6]\") \\\n",
    "        .Define(\"d2_den_pt\", \"results[7]\") \\\n",
    "        .Define(\"d3_den_pt\", \"results[8]\") \\\n",
    "        .Define(\"d1_den_d\", \"results[9]\") \\\n",
    "        .Define(\"d2_den_d\", \"results[10]\") \\\n",
    "        .Define(\"d3_den_d\", \"results[11]\") \\\n",
    "        .Define(\"d1_dr\", \"results[12]\") \\\n",
    "        .Define(\"d2_dr\", \"results[13]\") \\\n",
    "        .Define(\"d3_dr\", \"results[14]\") \\\n",
    "        .Define(\"B_num_pt\", \"results[15]\") \\\n",
    "        .Define(\"D_num_pt\", \"results[16]\") \\\n",
    "        .Define(\"B_den_pt\", \"results[17]\") \\\n",
    "        .Define(\"D_den_pt\", \"results[18]\") \\\n",
    "        .Define(\"B_dr\", \"results[19]\") \\\n",
    "        .Define(\"D_dr\", \"results[20]\") \\\n",
    "        .Define(\"B_M\", \"results[21]\") \\\n",
    "        .Define(\"D_M\", \"results[22]\") \\\n",
    "        .Define(\"d1_eta\", \"results[23]\") \\\n",
    "        .Define(\"d2_eta\", \"results[24]\") \\\n",
    "        .Define(\"d3_eta\", \"results[25]\") \\\n",
    "        .Define(\"d1_phi\", \"results[26]\") \\\n",
    "        .Define(\"d2_phi\", \"results[27]\") \\\n",
    "        .Define(\"d3_phi\", \"results[28]\") \\\n",
    "        .Define(\"d1_pt\", \"results[29]\") \\\n",
    "        .Define(\"d2_pt\", \"results[30]\") \\\n",
    "        .Define(\"d3_pt\", \"results[31]\")\n",
    "\n",
    "# Suppress dictionary warnings\n",
    "ROOT.gErrorIgnoreLevel = ROOT.kError\n",
    "\n",
    "# Lista dei branch per cui creare istogrammi\n",
    "branches = [\"d1_num_pt\", \"d2_num_pt\", \"d3_num_pt\", \"d1_den_pt\", \"d2_den_pt\", \"d3_den_pt\", \"d1_dr\", \"d2_dr\", \"d3_dr\", \"B_num_pt\", \"D_num_pt\", \"B_den_pt\", \"D_den_pt\", \"B_dr\", \"D_dr\",\"B_M\",\"D_M\",\"d1_pt\",\"d2_pt\",\"d3_pt\",\"d1_eta\",\"d2_eta\",\"d3_eta\",\"d1_phi\",\"d2_phi\",\"d3_phi\"]\n",
    "\n",
    "binning = {\n",
    "    \"d1_eta\": (100, -2.5, 2.5),\n",
    "    \"d1_phi\": (100, -4, 4),\n",
    "    \"d2_eta\": (100, -2.5, 2.5),\n",
    "    \"d2_phi\": (100, -4, 4),\n",
    "    \"d3_eta\": (100, -2.5, 2.5),\n",
    "    \"d3_phi\": (100, -4, 4),\n",
    "    \"d1_dr\": (100,0,0.05),\n",
    "    \"d2_dr\": (100,0,0.05),\n",
    "    \"d3_dr\": (100,0,0.05),\n",
    "    \"B_dr\": (100,0,0.1),\n",
    "    \"D_dr\": (100,0,0.1),\n",
    "    \"B_M\": (100,4,6),\n",
    "    \"D_M\": (100,0,3)\n",
    "}\n",
    "\n",
    "# 1. Dichiara tutti gli istogrammi senza chiamare GetValue()\n",
    "histo_pointers = {}\n",
    "print(\"Booking all histograms...\")\n",
    "for branch in branches:\n",
    "    nbins, min_val, max_val = binning.get(branch, (100, 0, 25)) # Default se non specificato\n",
    "    hist_name = f\"hist_{branch}\"\n",
    "    model = ROOT.RDF.TH1DModel(hist_name, f\"{branch};Value;Entries\", nbins, min_val, max_val)\n",
    "    histo_pointers[branch] = df1.Histo1D(model, branch)\n",
    "\n",
    "# 2. Triggera il calcolo\n",
    "print(\"Triggering event loop to fill all histograms...\")\n",
    "f = {}\n",
    "for branch, ptr in histo_pointers.items():\n",
    "    print(f\"Retrieving histogram for {branch}...\")\n",
    "    f[branch] = ptr.GetValue()\n",
    "\n",
    "# 3. Salva tutto\n",
    "print(\"Saving histograms to file...\")\n",
    "out_file = ROOT.TFile(\"histograms\"+decay+\".root\", \"RECREATE\")\n",
    "for hist in f.values():\n",
    "    hist.Write()\n",
    "out_file.Close()\n",
    "print(f\"All histograms saved in histograms{decay}.root\")\n",
    "end = time.time()\n",
    "print(f\"Tempo di esecuzione: {end - start:.3f} secondi\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "44fde663",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "name=\"Plots_\"+decay\n",
    "os.system(\"mkdir -p \"+name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "8033ddf9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "\n",
       "<div id=\"root_plot_1756990323767\" style=\"width: 700px; height: 500px; position: relative\">\n",
       "</div>\n",
       "\n",
       "<script>\n",
       "\n",
       "function display_root_plot_1756990323767(Core) {\n",
       "   let obj = Core.parse({\"_typename\":\"TCanvasWebSnapshot\",\"fUniqueID\":0,\"fBits\":0,\"fObjectID\":\"\",\"fOption\":\"\",\"fKind\":3,\"fSnapshot\":{\"_typename\":\"TCanvas\",\"fUniqueID\":0,\"fBits\":3342344,\"fLineColor\":1,\"fLineStyle\":1,\"fLineWidth\":1,\"fFillColor\":0,\"fFillStyle\":1001,\"fLeftMargin\":0.1,\"fRightMargin\":0.1,\"fBottomMargin\":0.1,\"fTopMargin\":0.1,\"fXfile\":2,\"fYfile\":2,\"fAfile\":1,\"fXstat\":0.99,\"fYstat\":0.99,\"fAstat\":2,\"fFrameFillColor\":0,\"fFrameLineColor\":1,\"fFrameFillStyle\":1001,\"fFrameLineStyle\":1,\"fFrameLineWidth\":1,\"fFrameBorderSize\":1,\"fFrameBorderMode\":0,\"fX1\":-3.43750025611372,\"fY1\":-0.13717808693215,\"fX2\":30.9375002561137,\"fY2\":1.2374293441493,\"fXtoAbsPixelk\":69.6000041484835,\"fXtoPixelk\":69.6000041484835,\"fXtoPixel\":20.2472724255648,\"fYtoAbsPixelk\":424.897055866317,\"fYtoPixelk\":424.897055866317,\"fYtoPixel\":-343.370761227925,\"fUtoAbsPixelk\":0,\"fUtoPixelk\":0,\"fUtoPixel\":696,\"fVtoAbsPixelk\":472,\"fVtoPixelk\":472,\"fVtoPixel\":-472,\"fAbsPixeltoXk\":-3.43750025611372,\"fPixeltoXk\":-3.43750025611372,\"fPixeltoX\":0.0493893685520509,\"fAbsPixeltoYk\":1.2374293441493,\"fPixeltoYk\":-0.13717808693215,\"fPixeltoY\":-0.00291230387940985,\"fXlowNDC\":0,\"fYlowNDC\":0,\"fXUpNDC\":1,\"fYUpNDC\":1,\"fWNDC\":1,\"fHNDC\":1,\"fAbsXlowNDC\":0,\"fAbsYlowNDC\":0,\"fAbsWNDC\":1,\"fAbsHNDC\":1,\"fUxmin\":0,\"fUymin\":2.82664369294487e-4,\"fUxmax\":27.5,\"fUymax\":1.09996859284786,\"fTheta\":30,\"fPhi\":30,\"fAspectRatio\":0,\"fNumber\":0,\"fTickx\":0,\"fTicky\":0,\"fLogx\":0,\"fLogy\":0,\"fLogz\":0,\"fPadPaint\":0,\"fCrosshair\":0,\"fCrosshairPos\":0,\"fBorderSize\":2,\"fBorderMode\":0,\"fModified\":true,\"fGridx\":false,\"fGridy\":false,\"fAbsCoord\":false,\"fEditable\":true,\"fFixedAspectRatio\":false,\"fPrimitives\":{\"_typename\":\"TList\",\"name\":\"TList\",\"arr\":[],\"opt\":[]},\"fExecs\":null,\"fName\":\"c_eff\",\"fTitle\":\"d1 Efficiency\",\"fNumPaletteColor\":0,\"fNextPaletteColor\":0,\"fDISPLAY\":\"$DISPLAY\",\"fDoubleBuffer\":0,\"fRetained\":true,\"fXsizeUser\":0,\"fYsizeUser\":0,\"fXsizeReal\":20,\"fYsizeReal\":14.28571,\"fWindowTopX\":0,\"fWindowTopY\":0,\"fWindowWidth\":0,\"fWindowHeight\":0,\"fCw\":696,\"fCh\":472,\"fCatt\":{\"_typename\":\"TAttCanvas\",\"fXBetween\":2,\"fYBetween\":2,\"fTitleFromTop\":1.2,\"fXdate\":0.2,\"fYdate\":0.3,\"fAdate\":1},\"kMoveOpaque\":true,\"kResizeOpaque\":true,\"fHighLightColor\":2,\"fBatch\":true,\"kShowEventStatus\":false,\"kAutoExec\":true,\"kMenuBar\":true},\"fActive\":false,\"fReadOnly\":true,\"fWithoutPrimitives\":false,\"fHasExecs\":false,\"fPrimitives\":[{\"_typename\":\"TWebSnapshot\",\"fUniqueID\":0,\"fBits\":0,\"fObjectID\":\"\",\"fOption\":\"\",\"fKind\":4,\"fSnapshot\":{\"_typename\":\"TWebPainting\",\"fUniqueID\":0,\"fBits\":0,\"fOper\":\"0:255,255,255;1:0,0,0;2:255,0,0;3:0,255,0;4:0,0,255;5:255,255,0;6:255,0,255;7:0,255,255;8:89,211,84;9:89,84,216;10:254,254,254;11:192,182,172;12:76,76,76;13:102,102,102;14:127,127,127;15:153,153,153;16:178,178,178;17:204,204,204;18:229,229,229;19:242,242,242;20:204,198,170;21:204,198,170;22:193,191,168;23:186,181,163;24:178,165,150;25:183,163,155;26:173,153,140;27:155,142,130;28:135,102,86;29:175,206,198;30:132,193,163;31:137,168,160;32:130,158,140;33:173,188,198;34:122,142,153;35:117,137,145;36:104,130,150;37:109,122,132;38:124,153,209;39:127,127,155;40:170,165,191;41:211,206,135;42:221,186,135;43:188,158,130;44:198,153,124;45:191,130,119;46:206,94,96;47:170,142,147;48:165,119,122;49:147,104,112;50:211,89,84;51:146,0,255;52:122,0,255;53:98,0,255;54:74,0,255;55:51,0,255;56:27,0,255;57:3,0,255;58:0,20,255;59:0,44,255;60:0,68,255;61:0,91,255;62:0,115,255;63:0,139,255;64:0,163,255;65:0,187,255;66:0,210,255;67:0,234,255;68:0,255,251;69:0,255,227;70:0,255,204;71:0,255,180;72:0,255,156;73:0,255,132;74:0,255,108;75:0,255,85;76:0,255,61;77:0,255,37;78:0,255,13;79:10,255,0;80:34,255,0;81:57,255,0;82:81,255,0;83:105,255,0;84:129,255,0;85:153,255,0;86:176,255,0;87:200,255,0;88:224,255,0;89:248,255,0;90:255,238,0;91:255,214,0;92:255,190,0;93:255,166,0;94:255,142,0;95:255,119,0;96:255,95,0;97:255,71,0;98:255,47,0;99:255,23,0;100:111,45,168;101:165,42,42;102:178,190,181;103:87,144,252;104:248,156,32;105:228,37,54;106:150,74,139;107:156,156,161;108:122,33,221;109:24,69,251;110:255,94,2;111:201,31,22;112:200,73,169;113:173,173,125;114:134,200,221;115:87,141,255;116:101,99,100;117:63,144,218;118:255,169,14;119:189,31,1;120:148,164,162;121:131,45,182;122:169,107,89;123:231,99,0;124:185,172,112;125:113,117,129;126:146,218,221;127:178,178,178;201:91,91,91;202:122,122,122;203:183,183,183;204:214,214,214;205:137,15,15;206:183,20,20;207:234,71,71;208:239,117,117;209:15,137,15;210:20,183,20;211:71,234,71;212:117,239,117;213:15,15,137;214:20,20,183;215:71,71,234;216:117,117,239;217:137,137,15;218:183,183,20;219:234,234,71;220:239,239,117;221:137,15,137;222:183,20,183;223:234,71,234;224:239,117,239;225:15,137,137;226:20,183,183;227:71,234,234;228:117,239,239;390:255,255,204;391:255,255,153;392:204,204,153;393:255,255,102;394:204,204,102;395:153,153,102;396:255,255,51;397:204,204,51;398:153,153,51;399:102,102,51;400:255,255,0;401:204,204,0;402:153,153,0;403:102,102,0;404:51,51,0;406:204,255,204;407:153,255,153;408:153,204,153;409:102,255,102;410:102,204,102;411:102,153,102;412:51,255,51;413:51,204,51;414:51,153,51;415:51,102,51;416:0,255,0;417:0,204,0;418:0,153,0;419:0,102,0;420:0,51,0;422:204,255,255;423:153,255,255;424:153,204,204;425:102,255,255;426:102,204,204;427:102,153,153;428:51,255,255;429:51,204,204;430:51,153,153;431:51,102,102;432:0,255,255;433:0,204,204;434:0,153,153;435:0,102,102;436:0,51,51;590:204,204,255;591:153,153,255;592:153,153,204;593:102,102,255;594:102,102,204;595:102,102,153;596:51,51,255;597:51,51,204;598:51,51,153;599:51,51,102;600:0,0,255;601:0,0,204;602:0,0,153;603:0,0,102;604:0,0,51;606:255,204,255;607:255,153,255;608:204,153,204;609:255,102,255;610:204,102,204;611:153,102,153;612:255,51,255;613:204,51,204;614:153,51,153;615:102,51,102;616:255,0,255;617:204,0,204;618:153,0,153;619:102,0,102;620:51,0,51;622:255,204,204;623:255,153,153;624:204,153,153;625:255,102,102;626:204,102,102;627:153,102,102;628:255,51,51;629:204,51,51;630:153,51,51;631:102,51,51;632:255,0,0;633:204,0,0;634:153,0,0;635:102,0,0;636:51,0,0;791:255,204,153;792:204,153,102;793:153,102,51;794:153,102,0;795:204,153,51;796:255,204,102;797:255,153,0;798:255,204,51;799:204,153,0;800:255,204,0;801:255,153,51;802:204,102,0;803:102,51,0;804:153,51,0;805:204,102,51;806:255,153,102;807:255,102,0;808:255,102,51;809:204,51,0;810:255,51,0;811:153,255,51;812:102,204,0;813:51,102,0;814:51,153,0;815:102,204,51;816:153,255,102;817:102,255,0;818:102,255,51;819:51,204,0;820:51,255,0;821:204,255,153;822:153,204,102;823:102,153,51;824:102,153,0;825:153,204,51;826:204,255,102;827:153,255,0;828:204,255,51;829:153,204,0;830:204,255,0;831:153,255,204;832:102,204,153;833:51,153,102;834:0,153,102;835:51,204,153;836:102,255,204;837:0,255,102;838:51,255,204;839:0,204,153;840:0,255,204;841:51,255,153;842:0,204,102;843:0,102,51;844:0,153,51;845:51,204,102;846:102,255,153;847:0,255,153;848:51,255,102;849:0,204,51;850:0,255,51;851:153,204,255;852:102,153,204;853:51,102,153;854:0,51,153;855:51,102,204;856:102,153,255;857:0,102,255;858:51,102,255;859:0,51,204;860:0,51,255;861:51,153,255;862:0,102,204;863:0,51,102;864:0,102,153;865:51,153,204;866:102,204,255;867:0,153,255;868:51,204,255;869:0,153,204;870:0,204,255;871:204,153,255;872:153,102,204;873:102,51,153;874:102,0,153;875:153,51,204;876:204,102,255;877:153,0,255;878:204,51,255;879:153,0,204;880:204,0,255;881:153,51,255;882:102,0,204;883:51,0,102;884:51,0,153;885:102,51,204;886:153,102,255;887:102,0,255;888:102,51,255;889:51,0,204;890:51,0,255;891:255,51,153;892:204,0,102;893:102,0,51;894:153,0,51;895:204,51,102;896:255,102,153;897:255,0,102;898:255,51,102;899:204,0,51;900:255,0,51;901:255,153,204;902:204,102,153;903:153,51,102;904:153,0,102;905:204,51,153;906:255,102,204;907:255,0,153;908:204,0,153;909:255,51,204;910:255,0,153;920:204,204,204;921:153,153,153;922:102,102,102;923:51,51,51;924:53,42,134;925:51,44,137;926:50,45,140;927:49,47,143;928:48,48,146;929:46,50,148;930:45,51,151;931:44,53,154;932:43,55,157;933:42,56,160;934:40,58,162;935:39,59,165;936:38,61,168;937:37,63,171;938:35,64,174;939:34,66,176;940:33,67,179;941:32,69,182;942:31,71,185;943:29,72,187;944:28,74,190;945:27,75,193;946:26,77,196;947:24,79,199;948:23,80,201;949:22,82,204;950:21,83,207;951:19,85,210;952:18,86,213;953:17,88,215;954:16,90,218;955:15,91,221;956:15,92,221;957:15,94,220;958:15,95,220;959:15,96,220;960:15,97,220;961:15,98,220;962:16,99,219;963:16,100,219;964:16,102,219;965:16,103,219;966:16,104,218;967:16,105,218;968:17,106,218;969:17,107,218;970:17,109,217;971:17,110,217;972:17,111,217;973:17,112,217;974:17,113,216;975:18,114,216;976:18,115,216;977:18,117,216;978:18,118,215;979:18,119,215;980:18,120,215;981:18,121,215;982:19,122,215;983:19,123,214;984:19,125,214;985:19,126,214;986:19,127,214;987:19,128,213;988:19,129,213;989:19,130,213;990:18,131,212;991:18,132,212;992:17,134,211;993:17,135,211;994:16,136,211;995:16,137,210;996:15,138,210;997:15,139,210;998:15,140,209;999:14,141,209;1000:14,142,208;1001:13,143,208;1002:13,145,208;1003:12,146,207;1004:12,147,207;1005:12,148,207;1006:11,149,206;1007:11,150,206;1008:10,151,205;1009:10,152,205;1010:9,153,205;1011:9,154,204;1012:8,155,204;1013:8,157,204;1014:8,158,203;1015:7,159,203;1016:7,160,202;1017:6,161,202;1018:6,162,202;1019:5,163,201;1020:7,164,200;1021:8,164,199;1022:9,165,198;1023:10,166,197;1024:12,166,195;1025:13,167,194;1026:14,167,193;1027:15,168,192;1028:17,169,191;1029:18,169,189;1030:19,170,188;1031:20,170,187;1032:22,171,186;1033:23,172,185;1034:24,172,184;1035:25,173,182;1036:27,173,181;1037:28,174,180;1038:29,175,179;1039:30,175,178;1040:32,176,176;1041:33,176,175;1042:34,177,174;1043:35,178,173;1044:37,178,172;1045:38,179,170;1046:39,180,169;1047:40,180,168;1048:42,181,167;1049:43,181,166;1050:44,182,165;1051:45,183,163;1052:48,183,162;1053:51,183,161;1054:54,183,159;1055:57,184,158;1056:59,184,156;1057:62,184,155;1058:65,184,154;1059:68,185,152;1060:71,185,151;1061:73,185,149;1062:76,185,148;1063:79,186,146;1064:82,186,145;1065:84,186,144;1066:87,186,142;1067:90,187,141;1068:93,187,139;1069:96,187,138;1070:98,187,137;1071:101,188,135;1072:104,188,134;1073:107,188,132;1074:110,188,131;1075:112,189,130;1076:115,189,128;1077:118,189,127;1078:121,189,125;1079:124,190,124;1080:126,190,123;1081:129,190,121;1082:132,190,120;1083:135,191,118;1084:137,190,117;1085:139,190,117;1086:142,190,116;1087:144,190,115;1088:146,190,114;1089:148,190,113;1090:151,190,112;1091:153,190,111;1092:155,189,110;1093:158,189,109;1094:160,189,108;1095:162,189,107;1096:165,189,106;1097:167,189,105;1098:169,189,104;1099:171,188,104;1100:174,188,103;1101:176,188,102;1102:178,188,101;1103:181,188,100;1104:183,188,99;1105:185,188,98;1106:188,188,97;1107:190,187,96;1108:192,187,95;1109:194,187,94;1110:197,187,93;1111:199,187,92;1112:201,187,92;1113:204,187,91;1114:206,186,90;1115:208,186,89;1116:210,187,88;1117:211,187,86;1118:212,188,85;1119:214,188,84;1120:215,188,83;1121:217,189,81;1122:218,189,80;1123:220,190,79;1124:221,190,78;1125:222,191,77;1126:224,191,75;1127:225,191,74;1128:227,192,73;1129:228,192,72;1130:229,193,70;1131:231,193,69;1132:232,194,68;1133:234,194,67;1134:235,194,66;1135:236,195,64;1136:238,195,63;1137:239,196,62;1138:241,196,61;1139:242,197,59;1140:244,197,58;1141:245,197,57;1142:246,198,56;1143:248,198,55;1144:249,199,53;1145:251,199,52;1146:252,200,51;1147:253,200,50;1148:253,202,49;1149:253,203,47;1150:253,205,46;1151:253,206,45;1152:253,208,44;1153:252,209,43;1154:252,211,42;1155:252,213,41;1156:252,214,39;1157:252,216,38;1158:252,217,37;1159:252,219,36;1160:251,220,35;1161:251,222,34;1162:251,224,33;1163:251,225,31;1164:251,227,30;1165:251,228,29;1166:250,230,28;1167:250,231,27;1168:250,233,26;1169:250,235,25;1170:250,236,23;1171:250,238,22;1172:250,239,21;1173:249,241,20;1174:249,242,19;1175:249,244,18;1176:249,246,17;1177:249,247,16;1178:249,249,14\",\"fBuf\":{\"$arr\":\"Float32\",\"len\":255,\"v\":[924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178]}}},{\"_typename\":\"TWebSnapshot\",\"fUniqueID\":0,\"fBits\":0,\"fObjectID\":\"\",\"fOption\":\"\",\"fKind\":5,\"fSnapshot\":{\"_typename\":\"TStyle\",\"fUniqueID\":0,\"fBits\":0,\"fName\":\"Modern\",\"fTitle\":\"Modern Style\",\"fLineColor\":1,\"fLineStyle\":1,\"fLineWidth\":1,\"fFillColor\":19,\"fFillStyle\":1001,\"fMarkerColor\":1,\"fMarkerStyle\":1,\"fMarkerSize\":1,\"fTextAngle\":0,\"fTextSize\":0.05,\"fTextAlign\":11,\"fTextColor\":1,\"fTextFont\":62,\"fXaxis\":{\"_typename\":\"TAttAxis\",\"fNdivisions\":510,\"fAxisColor\":1,\"fLabelColor\":1,\"fLabelFont\":42,\"fLabelOffset\":0.005,\"fLabelSize\":0.035,\"fTickLength\":0.03,\"fTitleOffset\":1,\"fTitleSize\":0.035,\"fTitleColor\":1,\"fTitleFont\":42},\"fYaxis\":{\"_typename\":\"TAttAxis\",\"fNdivisions\":510,\"fAxisColor\":1,\"fLabelColor\":1,\"fLabelFont\":42,\"fLabelOffset\":0.005,\"fLabelSize\":0.035,\"fTickLength\":0.03,\"fTitleOffset\":0,\"fTitleSize\":0.035,\"fTitleColor\":1,\"fTitleFont\":42},\"fZaxis\":{\"_typename\":\"TAttAxis\",\"fNdivisions\":510,\"fAxisColor\":1,\"fLabelColor\":1,\"fLabelFont\":42,\"fLabelOffset\":0.005,\"fLabelSize\":0.035,\"fTickLength\":0.03,\"fTitleOffset\":1,\"fTitleSize\":0.035,\"fTitleColor\":1,\"fTitleFont\":42},\"fBarWidth\":1,\"fBarOffset\":0,\"fColorModelPS\":0,\"fDrawBorder\":0,\"fOptLogx\":0,\"fOptLogy\":0,\"fOptLogz\":0,\"fOptDate\":0,\"fOptStat\":1111,\"fOptTitle\":1,\"fOptFile\":0,\"fOptFit\":0,\"fShowEventStatus\":0,\"fShowEditor\":0,\"fShowToolBar\":0,\"fNumberContours\":20,\"fAttDate\":{\"_typename\":\"TAttText\",\"fTextAngle\":0,\"fTextSize\":0.025,\"fTextAlign\":11,\"fTextColor\":1,\"fTextFont\":62},\"fDateX\":0.01,\"fDateY\":0.01,\"fEndErrorSize\":2,\"fErrorX\":0.5,\"fFuncColor\":2,\"fFuncStyle\":1,\"fFuncWidth\":2,\"fGridColor\":0,\"fGridStyle\":3,\"fGridWidth\":1,\"fLegendBorderSize\":1,\"fLegendFillColor\":0,\"fLegendFillStyle\":1001,\"fLegendFont\":42,\"fLegendTextSize\":0.05,\"fHatchesLineWidth\":1,\"fHatchesSpacing\":1,\"fFrameFillColor\":0,\"fFrameLineColor\":1,\"fFrameFillStyle\":1001,\"fFrameLineStyle\":1,\"fFrameLineWidth\":1,\"fFrameBorderSize\":1,\"fFrameBorderMode\":0,\"fHistFillColor\":0,\"fHistLineColor\":602,\"fHistFillStyle\":1001,\"fHistLineStyle\":1,\"fHistLineWidth\":1,\"fHistMinimumZero\":false,\"fHistTopMargin\":0.05,\"fCanvasPreferGL\":false,\"fCanvasColor\":0,\"fCanvasBorderSize\":2,\"fCanvasBorderMode\":0,\"fCanvasDefH\":500,\"fCanvasDefW\":700,\"fCanvasDefX\":10,\"fCanvasDefY\":10,\"fPadColor\":0,\"fPadBorderSize\":2,\"fPadBorderMode\":0,\"fPadBottomMargin\":0.1,\"fPadTopMargin\":0.1,\"fPadLeftMargin\":0.1,\"fPadRightMargin\":0.1,\"fPadGridX\":false,\"fPadGridY\":false,\"fPadTickX\":0,\"fPadTickY\":0,\"fPaperSizeX\":20,\"fPaperSizeY\":26,\"fScreenFactor\":1,\"fStatColor\":0,\"fStatTextColor\":1,\"fStatBorderSize\":1,\"fStatFont\":42,\"fStatFontSize\":0,\"fStatStyle\":1001,\"fStatFormat\":\"6.4g\",\"fStatX\":0.98,\"fStatY\":0.935,\"fStatW\":0.2,\"fStatH\":0.16,\"fStripDecimals\":true,\"fTitleAlign\":23,\"fTitleColor\":0,\"fTitleTextColor\":1,\"fTitleBorderSize\":0,\"fTitleFont\":42,\"fTitleFontSize\":0.05,\"fTitleStyle\":0,\"fTitleX\":0.5,\"fTitleY\":0.995,\"fTitleW\":0,\"fTitleH\":0,\"fLegoInnerR\":0.5,\"fLineStyles\":[\"\",\"  \",\" 12 12\",\" 4 8\",\" 12 16 4 16\",\" 20 12 4 12\",\" 20 12 4 12 4 12 4 12\",\" 20 20\",\" 20 12 4 12 4 12\",\" 80 20\",\" 80 40 4 40\",\"  \",\"  \",\"  \",\"  \",\"  \",\"  \",\"  \",\"  \",\"  \",\"  \",\"  \",\"  \",\"  \",\"  \",\"  \",\"  \",\"  \",\"  \",\"  \"],\"fHeaderPS\":\"\",\"fTitlePS\":\"\",\"fFitFormat\":\"5.4g\",\"fPaintTextFormat\":\"g\",\"fLineScalePS\":3,\"fJoinLinePS\":0,\"fCapLinePS\":0,\"fTimeOffset\":788918400,\"fImageScaling\":1,\"fCandleWhiskerRange\":1,\"fCandleBoxRange\":0.5,\"fCandleScaled\":false,\"fViolinScaled\":true,\"fXAxisExpXOffset\":0,\"fXAxisExpYOffset\":0,\"fYAxisExpXOffset\":0,\"fYAxisExpYOffset\":0,\"fAxisMaxDigits\":5,\"fOrthoCamera\":false}},{\"_typename\":\"TWebSnapshot\",\"fUniqueID\":0,\"fBits\":0,\"fObjectID\":\"\",\"fOption\":\"\",\"fKind\":1,\"fSnapshot\":{\"_typename\":\"TFrame\",\"fUniqueID\":0,\"fBits\":8,\"fLineColor\":1,\"fLineStyle\":1,\"fLineWidth\":1,\"fFillColor\":0,\"fFillStyle\":1001,\"fX1\":0,\"fY1\":2.82664369294487e-4,\"fX2\":27.5,\"fY2\":1.09996859284786,\"fBorderSize\":1,\"fBorderMode\":0}},{\"_typename\":\"TWebSnapshot\",\"fUniqueID\":0,\"fBits\":0,\"fObjectID\":\"\",\"fOption\":\"ap\",\"fKind\":2,\"fSnapshot\":{\"_typename\":\"TWebPainting\",\"fUniqueID\":0,\"fBits\":0,\"fOper\":\"y0:1001;b;z1:1:1;r;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;o1:42:-35:11:0;t0;o1:42:-35:11:0;t5;o1:42:-35:11:0;t10;o1:42:-35:11:0;t15;o1:42:-35:11:0;t20;o1:42:-35:11:0;t25;o1:42:-35:11:0;t pT [GeV];l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;o1:42:-35:11:0;t0.2;o1:42:-35:11:0;t0.4;o1:42:-35:11:0;t0.6;o1:42:-35:11:0;t0.8;o1:42:-35:11:0;t1;o1:42:-35:11:90;t Efficiency;x1:1:1;m100;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2;l2\",\"fBuf\":{\"$arr\":\"Float32\",\"len\":3602,\"p\":1,\"v\":[2.826644e-4,27.5,1.099969,0,2.826644e-4,27.5,1.099969,4.440892e-16,2.826644e-4,27.5,2.826644e-4,4.440892e-16,0.03327324,4.440892e-16,2.826644e-4,1,0.01677795,1,2.826644e-4,2,0.01677795,2,2.826644e-4,3,0.01677795,3,2.826644e-4,4,0.01677795,4,2.826644e-4,5,0.03327324,5,2.826644e-4,6,0.01677795,6,2.826644e-4,7,0.01677795,7,2.826644e-4,8,0.01677795,8,2.826644e-4,9,0.01677795,9,2.826644e-4,10,0.03327324,10,2.826644e-4,11,0.01677795,11,2.826644e-4,12,0.01677795,12,2.826644e-4,13,0.01677795,13,2.826644e-4,14,0.01677795,14,2.826644e-4,15,0.03327324,15,2.826644e-4,16,0.01677795,16,2.826644e-4,17,0.01677795,17,2.826644e-4,18,0.01677795,18,2.826644e-4,19,0.01677795,19,2.826644e-4,20,0.03327324,20,2.826644e-4,21,0.01677795,21,2.826644e-4,22,0.01677795,22,2.826644e-4,23,0.01677795,23,2.826644e-4,24,0.01677795,24,2.826644e-4,25,0.03327324,25,2.826644e-4,25,0.03327324,25,2.826644e-4,26,0.01677795,26,2.826644e-4,27,0.01677795,27,2.826644e-4,-0.1778019,-0.04398436,4.810524,-0.04398436,9.601293,-0.04398436,14.54023,-0.04398436,19.62733,-0.04398436,24.56627,-0.04398436,24.31932,-0.09058122,4.440892e-16,2.826644e-4,4.440892e-16,1.099969,0.825,0.2,4.440892e-16,0.2,0.4125,0.25,4.440892e-16,0.25,0.4125,0.3,4.440892e-16,0.3,0.4125,0.35,4.440892e-16,0.35,0.825,0.4,4.440892e-16,0.4,0.4125,0.45,4.440892e-16,0.45,0.4125,0.5,4.440892e-16,0.5,0.4125,0.55,4.440892e-16,0.55,0.825,0.6,4.440892e-16,0.6,0.4125,0.65,4.440892e-16,0.65,0.4125,0.7,4.440892e-16,0.7,0.4125,0.75,4.440892e-16,0.75,0.825,0.8,4.440892e-16,0.8,0.4125,0.85,4.440892e-16,0.85,0.4125,0.9,4.440892e-16,0.9,0.4125,0.95,4.440892e-16,0.95,0.825,1,4.440892e-16,1,0.825,0.2,4.440892e-16,0.2,0.4125,0.15,4.440892e-16,0.15,0.4125,0.1,4.440892e-16,0.1,0.4125,0.05,4.440892e-16,0.05,0.825,1,4.440892e-16,1,0.4125,1.05,4.440892e-16,1.05,-1.214979,0.1831753,-1.214979,0.381212,-1.214979,0.5821609,-1.214979,0.78311,-0.4741381,0.9811466,-2.054598,0.8996021,0.125,8.86918e-4,0.375,0.01733178,0.625,0.6893843,0.875,0.8131053,1.125,0.8553994,1.375,0.8732089,1.625,0.8860303,1.875,0.8962053,2.125,0.904933,2.375,0.9096019,2.625,0.9112168,2.875,0.913699,3.125,0.9207482,3.375,0.916128,3.625,0.9214586,3.875,0.9202127,4.125,0.9181371,4.375,0.9185243,4.625,0.9179205,4.875,0.9224166,5.125,0.9225326,5.375,0.9309091,5.625,0.9238418,5.875,0.9212963,6.125,0.9274052,6.375,0.9266512,6.625,0.9182851,6.875,0.932538,7.125,0.926011,7.375,0.9242504,7.625,0.9221148,7.875,0.9234393,8.125,0.9262918,8.375,0.943489,8.625,0.9414802,8.875,0.9148325,9.125,0.9175476,9.375,0.9415808,9.625,0.9302326,9.875,0.9382889,10.125,0.9309309,10.375,0.9370861,10.625,0.9197761,10.875,0.9118236,11.125,0.9381443,11.375,0.9269406,11.625,0.9211956,11.875,0.9281915,12.125,0.951952,12.375,0.924812,12.625,0.9298246,12.875,0.9338843,13.125,0.8953488,13.375,0.9598214,13.625,0.9067358,13.875,0.9405941,14.125,0.95,14.375,0.9239766,14.625,0.9440559,14.875,0.9109589,15.125,0.9602649,15.375,0.9611651,15.625,0.9292035,15.875,0.9090909,16.125,0.9404762,16.375,0.8846154,16.625,0.9243698,16.875,0.9493671,17.125,0.9186047,17.375,0.9365079,17.625,0.9375,17.875,0.9565217,18.125,0.9512195,18.375,0.9,18.625,0.9122807,18.875,0.9111111,19.125,0.9318182,19.375,0.98,19.625,0.9512195,19.875,0.9565217,20.125,0.9459459,20.375,0.9090909,20.625,0.8823529,20.875,0.9722222,21.125,0.8571429,21.375,0.84375,21.625,0.96875,21.875,1,22.125,0.9354839,22.375,0.9615384,22.625,0.8787879,22.875,0.9,23.125,1,23.375,0.9,23.625,1,23.875,0.95,24.125,1,24.375,1,24.625,1,24.875,0.8333333,0.125,8.86918e-4,0,8.86918e-4,0.125,8.86918e-4,0.25,8.86918e-4,0,2.826644e-4,0,0.006711526,0.25,2.826644e-4,0.25,0.006711526,0.125,8.86918e-4,0.125,0.002055498,0.125,8.86918e-4,0.125,2.826644e-4,0.02622126,0.002055498,0.2237787,0.002055498,0.02622126,2.826644e-4,0.2237787,2.826644e}}},{\"_typename\":\"TWebSnapshot\",\"fUniqueID\":0,\"fBits\":0,\"fObjectID\":\"\",\"fOption\":\"blNDC\",\"fKind\":1,\"fSnapshot\":{\"_typename\":\"TPaveText\",\"fUniqueID\":0,\"fBits\":9,\"fLineColor\":1,\"fLineStyle\":1,\"fLineWidth\":1,\"fFillColor\":0,\"fFillStyle\":0,\"fX1\":8.02280882270417,\"fY1\":1.14668196182153,\"fX2\":19.4771911772958,\"fY2\":1.23055631354853,\"fX1NDC\":0.333390804597701,\"fY1NDC\":0.933983055615829,\"fX2NDC\":0.666609195402299,\"fY2NDC\":0.995000004768372,\"fBorderSize\":0,\"fInit\":1,\"fShadowColor\":1,\"fCornerRadius\":0,\"fOption\":\"blNDC\",\"fName\":\"title\",\"fTextAngle\":0,\"fTextSize\":0,\"fTextAlign\":22,\"fTextColor\":1,\"fTextFont\":42,\"fLabel\":\"\",\"fLongest\":19,\"fMargin\":0.05,\"fLines\":{\"_typename\":\"TList\",\"name\":\"TList\",\"arr\":[{\"_typename\":\"TLatex\",\"fUniqueID\":0,\"fBits\":0,\"fName\":\"\",\"fTitle\":\"Efficiency d1 vs pT\",\"fTextAngle\":0,\"fTextSize\":0,\"fTextAlign\":0,\"fTextColor\":0,\"fTextFont\":0,\"fX\":0,\"fY\":0,\"fLineColor\":1,\"fLineStyle\":1,\"fLineWidth\":2,\"fLimitFactorSize\":3,\"fOriginSize\":0.0518644079566002}],\"opt\":[\"\"]}}}],\"fScripts\":\"\",\"fHighlightConnect\":false,\"fFixedSize\":false});\n",
       "   Core.settings.HandleKeys = false;\n",
       "   Core.draw(\"root_plot_1756990323767\", obj, \"\");\n",
       "}\n",
       "\n",
       "function script_load_root_plot_1756990323767(src, on_error) {\n",
       "    let script = document.createElement('script');\n",
       "    script.src = src;\n",
       "    script.onload = function() { display_root_plot_1756990323767(JSROOT); };\n",
       "    script.onerror = function() { script.remove(); on_error(); };\n",
       "    document.head.appendChild(script);\n",
       "}\n",
       "\n",
       "if (typeof requirejs !== 'undefined') {\n",
       "\n",
       "    // We are in jupyter notebooks, use require.js which should be configured already\n",
       "    requirejs.config({\n",
       "       paths: { 'JSRootCore' : [ 'build/jsroot', 'https://root.cern/js/7.7.4/build/jsroot', 'https://jsroot.gsi.de/7.7.4/build/jsroot' ] }\n",
       "    })(['JSRootCore'],  function(Core) {\n",
       "       display_root_plot_1756990323767(Core);\n",
       "    });\n",
       "\n",
       "} else if (typeof JSROOT !== 'undefined') {\n",
       "\n",
       "   // JSROOT already loaded, just use it\n",
       "   display_root_plot_1756990323767(JSROOT);\n",
       "\n",
       "} else {\n",
       "\n",
       "    // We are in jupyterlab without require.js, directly loading jsroot\n",
       "    // Jupyterlab might be installed in a different base_url so we need to know it.\n",
       "    try {\n",
       "        var base_url = JSON.parse(document.getElementById('jupyter-config-data').innerHTML).baseUrl;\n",
       "    } catch(_) {\n",
       "        var base_url = '/';\n",
       "    }\n",
       "\n",
       "    // Try loading a local version of requirejs and fallback to cdn if not possible.\n",
       "    script_load_root_plot_1756990323767(base_url + 'static/build/jsroot.js', function(){\n",
       "        console.error('Fail to load JSROOT locally, please check your jupyter_notebook_config.py file');\n",
       "        script_load_root_plot_1756990323767('https://root.cern/js/7.7.4/build/jsroot.js', function(){\n",
       "            document.getElementById(\"root_plot_1756990323767\").innerHTML = \"Failed to load JSROOT\";\n",
       "        });\n",
       "    });\n",
       "}\n",
       "\n",
       "</script>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "c_eff = TCanvas(\"c_eff\", \"d1 Efficiency\", 700, 500)\n",
    "num = f[\"d1_num_pt\"]\n",
    "den = f[\"d1_den_pt\"]\n",
    "eff = ROOT.TEfficiency(num, den)\n",
    "eff.SetTitle(\"Efficiency d1 vs pT; pT [GeV]; Efficiency\")\n",
    "eff.Draw()\n",
    "c_eff.SaveAs(name+\"/efficiency_d1_vs_pt.png\")\n",
    "c_eff.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8b8e1e8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "c_eff = TCanvas(\"c_eff\", \"d2 Efficiency\", 700, 500)\n",
    "num = f[\"d2_num_pt\"]\n",
    "den = f[\"d2_den_pt\"]\n",
    "eff = ROOT.TEfficiency(num, den)\n",
    "eff.SetTitle(\"Efficiency d2 vs pT; pT [GeV]; Efficiency\")\n",
    "eff.Draw()\n",
    "c_eff.SaveAs(name+\"/efficiency_d2_vs_pt.png\")\n",
    "c_eff.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a584f6ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "c_eff = TCanvas(\"c_eff\", \"d3 Efficiency\", 700, 500)\n",
    "num = f[\"d3_num_pt\"]\n",
    "den = f[\"d3_den_pt\"]\n",
    "eff = ROOT.TEfficiency(num, den)\n",
    "eff.SetTitle(\"Efficiency d3 vs pT; pT [GeV]; Efficiency\")\n",
    "eff.Draw()\n",
    "c_eff.SaveAs(name+\"/efficiency_d3_vs_pt.png\")\n",
    "c_eff.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13b1e596",
   "metadata": {},
   "outputs": [],
   "source": [
    "c_eff = TCanvas(\"c_eff\", \"D Efficiency pt\", 700, 500)\n",
    "num = f[\"D_num_pt\"]\n",
    "den = f[\"D_den_pt\"]\n",
    "eff = ROOT.TEfficiency(num, den)\n",
    "eff.SetTitle(\"Efficiency D vs pt; pt [Gev]; Efficiency\")\n",
    "eff.Draw()\n",
    "c_eff.SaveAs(name+\"/efficiency_D_vs_pt.png\")\n",
    "c_eff.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e150a4c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "c_eff = TCanvas(\"c_eff\", \"B Efficiency pt\", 700, 500)\n",
    "num = f[\"B_num_pt\"]\n",
    "den = f[\"B_den_pt\"]\n",
    "eff = ROOT.TEfficiency(num, den)\n",
    "eff.SetTitle(\"Efficiency B vs pt; pt [Gev]; Efficiency\")\n",
    "eff.Draw()\n",
    "c_eff.SaveAs(name+\"/efficiency_B_vs_pt.png\")\n",
    "c_eff.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2203aeca",
   "metadata": {},
   "outputs": [],
   "source": [
    "c0=TCanvas(\"c0\",\"pt distributions\",200,10,700,500)\n",
    "c0.cd()\n",
    "hd1=f[\"d1_pt\"]\n",
    "hd2=f[\"d2_pt\"]\n",
    "hd3=f[\"d3_pt\"]\n",
    "print(hd1.Integral())\n",
    "print(hd2.Integral())\n",
    "print(hd3.Integral())\n",
    "hd1.SetLineColor(2)\n",
    "hd2.SetLineColor(4)\n",
    "hd3.SetLineColor(6)\n",
    "hd1.SetStats(0) \n",
    "hd1.Draw()\n",
    "hd2.Draw(\"same\")\n",
    "hd3.Draw(\"same\")\n",
    "hd1.SetTitle(\"Pt distributions\")\n",
    "hd1.GetXaxis().SetTitle(\"p_{t} [Gev/c]\")\n",
    "hd1.GetYaxis().SetTitle(\"number of tracks\")\n",
    "legend=TLegend(0.7,0.8,0.85,0.6)\n",
    "legend.AddEntry(hd1,\"d1 p_{t}\")\n",
    "legend.AddEntry(hd2,\"d2 p_{t}\")\n",
    "legend.AddEntry(hd3,\"d3 p_{t}\")\n",
    "ROOT.gStyle.SetLegendTextSize(0.05)\n",
    "legend.Draw()\n",
    "c0.Draw()\n",
    "c0.SaveAs(name+\"/pt_distributions.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1fe93396",
   "metadata": {},
   "outputs": [],
   "source": [
    "c0=TCanvas(\"c0\",\"eta distributions\",200,10,700,500)\n",
    "c0.cd()\n",
    "hd1=f[\"d1_eta\"]\n",
    "hd2=f[\"d2_eta\"]\n",
    "hd3=f[\"d3_eta\"]\n",
    "print(hd1.Integral())\n",
    "print(hd2.Integral())\n",
    "print(hd3.Integral())\n",
    "hd1.SetLineColor(2)\n",
    "hd2.SetLineColor(4)\n",
    "hd3.SetLineColor(6)\n",
    "hd1.SetStats(0) \n",
    "hd1.Draw()\n",
    "hd2.Draw(\"same\")\n",
    "hd3.Draw(\"same\")\n",
    "hd1.SetTitle(\"Eta distributions\")\n",
    "hd1.GetXaxis().SetTitle(\"Eta\")\n",
    "hd1.GetYaxis().SetTitle(\"number of tracks\")\n",
    "legend=TLegend(0.7,0.8,0.85,0.6)\n",
    "legend.AddEntry(hd1,\"d1 eta\")\n",
    "legend.AddEntry(hd2,\"d2 eta\")\n",
    "legend.AddEntry(hd3,\"d3 eta\")\n",
    "ROOT.gStyle.SetLegendTextSize(0.05)\n",
    "legend.Draw()\n",
    "c0.Draw()\n",
    "c0.SaveAs(name+\"/eta_distributions.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c334a33a",
   "metadata": {},
   "outputs": [],
   "source": [
    "c0=TCanvas(\"c0\",\"phi distributions\",200,10,700,500)\n",
    "c0.cd()\n",
    "hd1=f[\"d1_phi\"]\n",
    "hd2=f[\"d2_phi\"]\n",
    "hd3=f[\"d3_phi\"]\n",
    "print(hd1.Integral())\n",
    "print(hd2.Integral())\n",
    "print(hd3.Integral())\n",
    "hd1.SetLineColor(2)\n",
    "hd2.SetLineColor(4)\n",
    "hd3.SetLineColor(6)\n",
    "hd1.SetStats(0) \n",
    "hd1.Draw()\n",
    "hd2.Draw(\"same\")\n",
    "hd3.Draw(\"same\")\n",
    "hd1.SetTitle(\"Phi distributions\")\n",
    "hd1.GetXaxis().SetTitle(\"phi [rad]\")\n",
    "hd1.GetYaxis().SetTitle(\"number of tracks\")\n",
    "legend=TLegend(0.7,0.8,0.85,0.6)\n",
    "legend.AddEntry(hd1,\"d1 phi\")\n",
    "legend.AddEntry(hd2,\"d2 phi\")\n",
    "legend.AddEntry(hd3,\"d3 phi\")\n",
    "ROOT.gStyle.SetLegendTextSize(0.05)\n",
    "legend.Draw()\n",
    "c0.Draw()\n",
    "c0.SaveAs(name+\"/phi_distributions.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f2d0d3d",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = ROOT.TCanvas(\"c\", \"D invariant mass\", 700, 500)\n",
    "hist = f[\"D_M\"]\n",
    "hist.SetLineColor(ROOT.kBlue)\n",
    "hist.SetTitle(\"D_M; Invariant mass [GeV]; Entries\")\n",
    "hist.Draw()\n",
    "c.SaveAs(name+\"/D_M.png\")\n",
    "c.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b7d34d93",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = ROOT.TCanvas(\"c\", \"B invariant mass\", 700, 500)\n",
    "hist = f[\"B_M\"]\n",
    "hist.SetLineColor(ROOT.kBlue)\n",
    "hist.SetTitle(\"B_M; Invariant mass [GeV]; Entries\")\n",
    "hist.Draw()\n",
    "c.SaveAs(name+\"/B_M.png\")\n",
    "c.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "969b2208",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = ROOT.TCanvas(\"c\", \"dr distribution d1\", 700, 500)\n",
    "hist = f[\"d1_dr\"]\n",
    "hist.SetLineColor(ROOT.kBlue)\n",
    "hist.SetTitle(\"d1_dr;Angular Distance; Entries\")\n",
    "hist.Draw()\n",
    "c.SaveAs(\"Plots/d1_dr.png\")\n",
    "c.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d3afd8e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = ROOT.TCanvas(\"c\", \"dr distribution d2\", 700, 500)\n",
    "hist = f[\"d2_dr\"]\n",
    "hist.SetLineColor(ROOT.kBlue)\n",
    "hist.SetTitle(\"d2_dr;Angular Distance; Entries\")\n",
    "hist.Draw()\n",
    "c.SaveAs(name+\"/d2_dr.png\")\n",
    "c.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e7ca77d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = ROOT.TCanvas(\"c\", \"dr distribution d3\", 700, 500)\n",
    "hist = f[\"d3_dr\"]\n",
    "hist.SetLineColor(ROOT.kBlue)\n",
    "hist.SetTitle(\"d3_dr;Angular Distance; Entries\")\n",
    "hist.Draw()\n",
    "c.SaveAs(name+\"/d3_dr.png\")\n",
    "c.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d0f108d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = ROOT.TCanvas(\"c\", \"dr distribution D\", 700, 500)\n",
    "hist = f[\"D_dr\"]\n",
    "hist.SetLineColor(ROOT.kBlue)\n",
    "hist.SetTitle(\"D_dr;Angular Distance; Entries\")\n",
    "hist.Draw()\n",
    "c.SaveAs(name+\"/D_dr.png\")\n",
    "c.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9282636f",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = ROOT.TCanvas(\"c\", \"dr distribution B\", 700, 500)\n",
    "hist = f[\"B_dr\"]\n",
    "hist.SetLineColor(ROOT.kBlue)\n",
    "hist.SetTitle(\"B_dr;Angular Distance; Entries\")\n",
    "hist.Draw()\n",
    "c.SaveAs(name+\"/B_dr.png\")\n",
    "c.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "84e133d0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "be06479b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4c43e44e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9c32b9ce",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4548724c",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "c_eff = TCanvas(\"c_eff\", \"d1 Efficiency d\", 700, 500)\n",
    "num = f[\"d1_num_d\"]\n",
    "den = f[\"d1_den_d\"]\n",
    "eff = ROOT.TEfficiency(num, den)\n",
    "eff.SetTitle(\"Efficiency d1 vs d; d [cm]; Efficiency\")\n",
    "eff.Draw()\n",
    "c_eff.SaveAs(name+\"/efficiency_d1_vs_d.png\")\n",
    "c_eff.Draw()\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "189ca94d",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "c_eff = TCanvas(\"c_eff\", \"d2 Efficiency d\", 700, 500)\n",
    "num = f[\"d2_num_d\"]\n",
    "den = f[\"d2_den_d\"]\n",
    "eff = ROOT.TEfficiency(num, den)\n",
    "eff.SetTitle(\"Efficiency d2 vs d; d [cm]; Efficiency\")\n",
    "eff.Draw()\n",
    "c_eff.SaveAs(name+\"/efficiency_d2_vs_d.png\")\n",
    "c_eff.Draw()\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8673a634",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "c_eff = TCanvas(\"c_eff\", \"d3 Efficiency d\", 700, 500)\n",
    "num = f[\"d3_num_d\"]\n",
    "den = f[\"d3_den_d\"]\n",
    "eff = ROOT.TEfficiency(num, den)\n",
    "eff.SetTitle(\"Efficiency d3 vs d; d [cm]; Efficiency\")\n",
    "eff.Draw()\n",
    "c_eff.SaveAs(name+\"/efficiency_d3_vs_d.png\")\n",
    "c_eff.Draw()\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b52e180f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "44c8182d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d7359fc9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "31c4e5dc",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "@webio": {
   "lastCommId": null,
   "lastKernelId": null
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
