{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 330,
   "id": "34bd3827",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import ROOT\n",
    "from ROOT import RDataFrame,RVec\n",
    "from ROOT import TChain, TSelector, TTree, TH1F, TCanvas, TFile, TEfficiency, TLegend\n",
    "from ROOT.Math import PtEtaPhiMVector\n",
    "from ROOT import TLorentzVector\n",
    "from ROOT import TVector3\n",
    "from array import array\n",
    "import numpy as np\n",
    "ROOT.gROOT.SetBatch(ROOT.kTRUE)\n",
    "folder=\"/eos/user/f/fsimone/B_Dh_summerproject/bphnano/B_to_DK_KKK_Run3Summer24NanoAOD_v0_2025Aug27/B_to_DK_KKK__TuneCP5_13p6TeV_pythia8_Run3Summer24GS_v1/B_to_DK_KKK__Run3Summer24NanoAOD_v0/250827_105026/\"\n",
    "tree=TChain(\"Events\")\n",
    "for fol,subfolders,files in os.walk(folder):\n",
    "    for file in files:\n",
    "        tree.Add(fol+\"/\"+file)\n",
    "\n",
    "#tree.GetEntry(5)\n",
    "#for e in tree.GenPart_pdgId:\n",
    "#    print(e)\n",
    "\n",
    "\n",
    "#tree.Print()\n",
    "#N = tree.GetEntries()\n",
    "#print(\"total number of events=\",N)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 356,
   "id": "8dc10629",
   "metadata": {},
   "outputs": [],
   "source": [
    "pdg = ROOT.TDatabasePDG.Instance()\n",
    "id1=321\n",
    "id2=-321\n",
    "id3=321\n",
    "t=False\n",
    "th1=0.01\n",
    "th2=0.01\n",
    "th3=0.01\n",
    "dm={1:pdg.GetParticle(id1).Mass(),2:pdg.GetParticle(id2).Mass(),3:pdg.GetParticle(id3).Mass()}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 357,
   "id": "264dc0c6",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning in <TROOT::Append>: Replacing existing TH1: d1_num_pt (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: d2_num_pt (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: d3_num_pt (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: d1_den_pt (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: d2_den_pt (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: d3_den_pt (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: d1_num_d (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: d2_num_d (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: d3_num_d (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: d1_den_d (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: d2_den_d (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: d3_den_d (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: D_num_pt (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: B_num_pt (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: D_num_pt (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: B_num_pt (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: d1_dr (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: d2_dr (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: d3_dr (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: B_dr (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: D_dr (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: d1_pt (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: d2_pt (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: d3_pt (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: d1_eta (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: d2_eta (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: d3_eta (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: d1_phi (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: d2_phi (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: d3_phi (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: B_M (Potential memory leak).\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: D_M (Potential memory leak).\n"
     ]
    }
   ],
   "source": [
    "d1_num_pt=TH1F(\"d1_num_pt\",\"reco daughter 1 vs pt\",100,0,25)\n",
    "d2_num_pt=TH1F(\"d2_num_pt\",\"reco daughter 2 vs pt\",100,0,25)\n",
    "d3_num_pt=TH1F(\"d3_num_pt\",\"reco daughter 3 vs pt\",100,0,25)\n",
    "d1_den_pt=TH1F(\"d1_den_pt\",\"gen daughter 1 vs pt\",100,0,25)\n",
    "d2_den_pt=TH1F(\"d2_den_pt\",\"gen daughter 2 vs pt\",100,0,25)\n",
    "d3_den_pt=TH1F(\"d3_den_pt\",\"gen daughter 3 vs pt\",100,0,25)\n",
    "d1_num_d=TH1F(\"d1_num_d\",\"reco daughter 1 vs d\",100,0,20)\n",
    "d2_num_d=TH1F(\"d2_num_d\",\"reco daughter 2 vs d\",100,0,20)\n",
    "d3_num_d=TH1F(\"d3_num_d\",\"reco daughter 3 vs d\",100,0,20)\n",
    "d1_den_d=TH1F(\"d1_den_d\",\"gen daughter 1 vs d\",100,0,20)\n",
    "d2_den_d=TH1F(\"d2_den_d\",\"gen daughter 2 vs d\",100,0,20)\n",
    "d3_den_d=TH1F(\"d3_den_d\",\"gen daughter 3 vs d\",100,0,20)\n",
    "D_num_pt=TH1F(\"D_num_pt\",\"reco D vs pt\",100,0,25)\n",
    "B_num_pt=TH1F(\"B_num_pt\",\"reco B vs pt\",100,0,25)\n",
    "D_den_pt=TH1F(\"D_num_pt\",\"gen D vs pt\",100,0,25)\n",
    "B_den_pt=TH1F(\"B_num_pt\",\"gen B vs pt\",100,0,25)\n",
    "d1_dr=TH1F(\"d1_dr\",\"d1 dr distribution\",100,0,0.05)\n",
    "d2_dr=TH1F(\"d2_dr\",\"d2 dr distribution\",100,0,0.05)\n",
    "d3_dr=TH1F(\"d3_dr\",\"d3 dr distribution\",100,0,0.05)\n",
    "B_dr=TH1F(\"B_dr\",\"B dr distribution\",100,0,0.1)\n",
    "D_dr=TH1F(\"D_dr\",\"D dr distribution\",100,0,0.1)\n",
    "d1_pt=TH1F(\"d1_pt\",\"reco d1 pt distribution\",100,0,25)\n",
    "d2_pt=TH1F(\"d2_pt\",\"reco d2 pt distribution\",100,0,25)\n",
    "d3_pt=TH1F(\"d3_pt\",\"reco d3 pt distribution\",100,0,25)\n",
    "d1_eta=TH1F(\"d1_eta\",\"reco d1 eta distribution\",100,-3,3)\n",
    "d2_eta=TH1F(\"d2_eta\",\"reco d2 eta distribution\",100,-3,3)\n",
    "d3_eta=TH1F(\"d3_eta\",\"reco d3 eta distribution\",100,-3,3)\n",
    "d1_phi=TH1F(\"d1_phi\",\"reco d1 phi distribution\",100,-4,4)\n",
    "d2_phi=TH1F(\"d2_phi\",\"reco d2 phi distribution\",100,-4,4)\n",
    "d3_phi=TH1F(\"d3_phi\",\"reco d3 phi distribution\",100,-4,4)\n",
    "B_M=TH1F(\"B_M\",\"d1 d2 d3 invariant mass distribution\",100,4,6)\n",
    "D_M=TH1F(\"D_M\",\"d1 d2 invariant mass distribution\",100,0,3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 358,
   "id": "4891d942",
   "metadata": {},
   "outputs": [],
   "source": [
    "def matching_m(tree,p,m,hDen,hNum,hdR,th,hIM):\n",
    "    matches=[]\n",
    "    for plus in p:\n",
    "        for minus in m:\n",
    "            if plus[1]==minus[1]:\n",
    "                pt=tree.GenPart_pt[plus[1]]\n",
    "                eta=tree.GenPart_eta[plus[1]]\n",
    "                phi=tree.GenPart_phi[plus[1]]\n",
    "                mass=tree.GenPart_mass[plus[1]]\n",
    "                GenMother=PtEtaPhiMVector(pt,eta,phi,mass)\n",
    "                RecoMother=plus[2]+minus[2]\n",
    "                dr=ROOT.Math.VectorUtil.DeltaR(GenMother,RecoMother)\n",
    "                hIM.Fill(RecoMother.M())\n",
    "                hdR.Fill(dr)\n",
    "                if dr<th:\n",
    "                    hNum.Fill(pt)\n",
    "                    matches.append((GenMother,tree.GenPart_genPartIdxMother[plus[1]],RecoMother))\n",
    "    return matches          "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 359,
   "id": "9a7b88d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def matching (Gp,Tp):\n",
    "    pdg = ROOT.TDatabasePDG.Instance()\n",
    "    m1=[]\n",
    "    m2=[]\n",
    "    m3=[]\n",
    "    go=True\n",
    "    while go:\n",
    "        go=False\n",
    "        match=dict()\n",
    "        i=0\n",
    "        while i<(len(Gp)):\n",
    "            dR0=1000\n",
    "            idx=0\n",
    "            for j in range(len(Tp)):\n",
    "                dR=ROOT.Math.VectorUtil.DeltaR(Gp[i][0],Tp[j])\n",
    "                if dR<dR0:\n",
    "                    dR0=dR\n",
    "                    idx=j\n",
    "            if (Gp[i][2]==1 and dR0<th1) or (Gp[i][2]==2 and dR0<th2) or (Gp[i][2]==3 and dR0<th3):\n",
    "                if idx in match:\n",
    "                    go=True\n",
    "                    match[idx].add((i,dR0))\n",
    "                else:\n",
    "                    match[idx]={(i,dR0)}\n",
    "                i+=1\n",
    "            else:\n",
    "                if Gp[i][2]==1:\n",
    "                    d1_dr.Fill(dR0)\n",
    "                elif Gp[i][2]==2:\n",
    "                    d2_dr.Fill(dR0)\n",
    "                else:\n",
    "                    d3_dr.Fill(dR0)\n",
    "                del Gp[i]\n",
    "        l_g=[]\n",
    "        l_t=[]\n",
    "        for e in match:\n",
    "            dr=1000\n",
    "            ind=0\n",
    "            for el in match[e]:\n",
    "                if el[1]<dr:\n",
    "                    dr=el[1]\n",
    "                    ind=el[0]\n",
    "            Tp[e]=PtEtaPhiMVector(Tp[e].Pt(),Tp[e].Eta(),Tp[e].Phi(),dm[Gp[ind][2]])\n",
    "            if Gp[ind][2]==1:\n",
    "                d1_num_pt.Fill(Gp[ind][3])\n",
    "                d1_dr.Fill(dr)\n",
    "                d1_num_d.Fill(Gp[ind][4])\n",
    "                m1.append((Gp[ind][0],Gp[ind][1],Tp[e]))\n",
    "            elif Gp[ind][2]==2:\n",
    "                d2_num_pt.Fill(Gp[ind][3])\n",
    "                d2_dr.Fill(dr)\n",
    "                d2_num_d.Fill(Gp[ind][4])\n",
    "                m2.append((Gp[ind][0],Gp[ind][1],Tp[e]))\n",
    "            else:\n",
    "                d3_num_pt.Fill(Gp[ind][3])\n",
    "                d3_dr.Fill(dr)\n",
    "                d3_num_d.Fill(Gp[ind][4])\n",
    "                m3.append((Gp[ind][0],Gp[ind][1],Tp[e]))\n",
    "            l_g.append(ind)\n",
    "            l_t.append(e)\n",
    "        l_g.sort(reverse=True)\n",
    "        l_t.sort(reverse=True)\n",
    "        for e in l_g:\n",
    "            del Gp[e]\n",
    "        for e in l_t:\n",
    "            del Tp[e]\n",
    "    return (m1,m2,m3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 360,
   "id": "65627187",
   "metadata": {},
   "outputs": [],
   "source": [
    "def main (g_id,g_midx,g_pt,g_eta,g_phi,st,g_mass,g_vx,g_vy,g_vz,t_ch,t_pt,t_eta,t_phi,t_mass,m_eta,m_pt):\n",
    "    d=dict()\n",
    "    Gp=[]\n",
    "    Gm=[]\n",
    "    go=False\n",
    "    if t==True:\n",
    "            for eta,pt in zip(m_eta,m_pt):\n",
    "                if abs(eta)<1.5 and pt>9:\n",
    "                    go=True\n",
    "    else:\n",
    "        go=True\n",
    "    for i in range(len(g_id)):\n",
    "        if st[i]==1:\n",
    "            midx=g_midx[i]\n",
    "            if g_id[i]==id1 and abs(g_id[midx])==421:\n",
    "                gmidx=g_midx[midx]\n",
    "                if abs(g_id[gmidx])==521:\n",
    "                    GenP=PtEtaPhiMVector(g_pt[i],g_eta[i],g_phi[i],pdg.GetParticle(g_id[i]).Mass())\n",
    "                    if gmidx in d:\n",
    "                        d[gmidx].add((GenP,midx,1,g_pt[i],ROOT.TMath.Sqrt(g_vx[i]**2+g_vy[i]**2+g_vz[i]**2)))\n",
    "                    else:\n",
    "                        d[gmidx]={(GenP,midx,1,g_pt[i],ROOT.TMath.Sqrt(g_vx[i]**2+g_vy[i]**2+g_vz[i]**2))}\n",
    "            elif g_id[i]==id2 and abs(g_id[midx])==421:\n",
    "                gmidx=g_midx[midx]\n",
    "                if abs(g_id[gmidx])==521:\n",
    "                    GenP=PtEtaPhiMVector(g_pt[i],g_eta[i],g_phi[i],pdg.GetParticle(g_id[i]).Mass())\n",
    "                    if gmidx in d:\n",
    "                        d[gmidx].add((GenP,midx,2,g_pt[i],ROOT.TMath.Sqrt(g_vx[i]**2+g_vy[i]**2+g_vz[i]**2)))\n",
    "                    else:\n",
    "                        d[gmidx]={(GenP,midx,2,g_pt[i],ROOT.TMath.Sqrt(g_vx[i]**2+g_vy[i]**2+g_vz[i]**2))}\n",
    "            else:\n",
    "                if g_id[i]==-id3:\n",
    "                    if g_id[midx]==-521:\n",
    "                        GenP=PtEtaPhiMVector(g_pt[i],g_eta[i],g_phi[i],pdg.GetParticle(g_id[i]).Mass())\n",
    "                        if midx in d:\n",
    "                            d[midx].add((GenP,midx,3,g_pt[i],ROOT.TMath.Sqrt(g_vx[i]**2+g_vy[i]**2+g_vz[i]**2)))\n",
    "                        else:\n",
    "                            d[midx]={(GenP,midx,3,g_pt[i],ROOT.TMath.Sqrt(g_vx[i]**2+g_vy[i]**2+g_vz[i]**2))}\n",
    "                elif g_id[i]==id3:\n",
    "                    midx=g_midx[i]\n",
    "                    if g_id[midx]==521:\n",
    "                        GenP=PtEtaPhiMVector(g_pt[i],g_eta[i],g_phi[i],pdg.GetParticle(g_id[i]).Mass())\n",
    "                        if midx in d:\n",
    "                            d[midx].add((GenP,midx,3,g_pt[i],ROOT.TMath.Sqrt(g_vx[i]**2+g_vy[i]**2+g_vz[i]**2)))\n",
    "                        else:\n",
    "                            d[midx]={(GenP,midx,3,g_pt[i],ROOT.TMath.Sqrt(g_vx[i]**2+g_vy[i]**2+g_vz[i]**2))}\n",
    "    for B in d:\n",
    "        if len(d[B])==3:\n",
    "            for e in d[B]:\n",
    "                if e[2]==1:\n",
    "                    B_den_pt.Fill(g_pt[B])\n",
    "                    D_den_pt.Fill(g_pt[e[1]])\n",
    "                    d1_den_pt.Fill(e[3])\n",
    "                    d1_den_d.Fill(e[4])\n",
    "                    Gp.append(e)\n",
    "                elif e[2]==2:\n",
    "                    d2_den_pt.Fill(e[3])\n",
    "                    d2_den_d.Fill(e[4])\n",
    "                    Gm.append(e)\n",
    "                else:\n",
    "                    d3_den_pt.Fill(e[3])\n",
    "                    d3_den_d.Fill(e[4])\n",
    "                    if g_id[B]>0:\n",
    "                        Gp.append(e)\n",
    "                    else:\n",
    "                        Gm.append(e)\n",
    "                        \n",
    "    if go:\n",
    "        Tp=[]\n",
    "        Tm=[]\n",
    "        for ch,t_pt,t_eta,t_phi,t_mass in zip(t_ch,t_pt,t_eta,t_phi,t_mass):\n",
    "            Track=PtEtaPhiMVector(t_pt,t_eta,t_phi,t_mass)\n",
    "            if ch==1:\n",
    "                Tp.append(Track)\n",
    "            elif ch==-1:\n",
    "                Tm.append(Track)\n",
    "        m1a,m2a,m3a=matching(Gp,Tp)\n",
    "        m1b,m2b,m3b=matching(Gm,Tm)\n",
    "        m1=m1a+m1b\n",
    "        m2=m2a+m2b\n",
    "        m3=m3a+m3b\n",
    "        for e in m1:\n",
    "            d1_pt.Fill(e[2].Pt())\n",
    "            d1_eta.Fill(e[2].Eta())\n",
    "            d1_phi.Fill(e[2].Phi())\n",
    "        for e in m2:\n",
    "            d2_pt.Fill(e[2].Pt())\n",
    "            d2_eta.Fill(e[2].Eta())\n",
    "            d2_phi.Fill(e[2].Phi())\n",
    "        for e in m3:\n",
    "            d3_pt.Fill(e[2].Pt())\n",
    "            d3_eta.Fill(e[2].Eta())\n",
    "            d3_phi.Fill(e[2].Phi())\n",
    "        mD=matching_m(tree,m1,m2,D_den_pt,D_num_pt,D_dr,0.05,D_M)\n",
    "        mB=matching_m(tree,mD,m3,B_den_pt,B_num_pt,B_dr,0.05,B_M)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "237bc614",
   "metadata": {},
   "outputs": [],
   "source": [
    "d1_num_pt.Reset()\n",
    "d2_num_pt.Reset()\n",
    "d3_num_pt.Reset()\n",
    "d1_den_pt.Reset()\n",
    "d2_den_pt.Reset()\n",
    "d3_den_pt.Reset()\n",
    "d1_num_d.Reset()\n",
    "d2_num_d.Reset()\n",
    "d3_num_d.Reset()\n",
    "d1_den_d.Reset()\n",
    "d2_den_d.Reset()\n",
    "d3_den_d.Reset()\n",
    "D_num_pt.Reset()\n",
    "B_num_pt.Reset()\n",
    "D_den_pt.Reset()\n",
    "B_den_pt.Reset()\n",
    "d1_dr.Reset()\n",
    "d2_dr.Reset()\n",
    "d3_dr.Reset()\n",
    "B_dr.Reset()\n",
    "D_dr.Reset()\n",
    "d1_pt.Reset()\n",
    "d2_pt.Reset()\n",
    "d3_pt.Reset()\n",
    "d1_eta.Reset()\n",
    "d2_eta.Reset()\n",
    "d3_eta.Reset()\n",
    "d1_phi.Reset()\n",
    "d2_phi.Reset()\n",
    "d3_phi.Reset()\n",
    "B_M.Reset()\n",
    "D_M.Reset()\n",
    "for i in range(10000):\n",
    "    tree.GetEntry(i)\n",
    "    main(tree.GenPart_pdgId,tree.GenPart_genPartIdxMother,tree.GenPart_pt,tree.GenPart_eta,tree.GenPart_phi,tree.GenPart_status,tree.GenPart_mass,tree.GenPart_vx,tree.GenPart_vy,tree.GenPart_vz,tree.Track_charge,tree.Track_pt,tree.Track_eta,tree.Track_phi,tree.Track_mass,tree.AllMuon_eta,tree.AllMuon_pt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "50fc6af2",
   "metadata": {},
   "outputs": [],
   "source": [
    "c0=TCanvas(\"c0\",\"pt distributions\",200,10,700,500)\n",
    "c0.cd()\n",
    "d1_pt.SetLineColor(2)\n",
    "d2_pt.SetLineColor(4)\n",
    "d3_pt.SetLineColor(6)\n",
    "d1_pt.SetStats(0) \n",
    "d1_pt.Draw()\n",
    "d2_pt.Draw(\"same\")\n",
    "d3_pt.Draw(\"same\")\n",
    "d1_pt.SetTitle(\"Pt distributions\")\n",
    "d1_pt.GetXaxis().SetTitle(\"p_{t} [Gev/c]\")\n",
    "d1_pt.GetYaxis().SetTitle(\"number of tracks\")\n",
    "legend=TLegend(0.7,0.8,0.85,0.6)\n",
    "legend.AddEntry(d1_pt,\"d1 p_{t}\")\n",
    "legend.AddEntry(d2_pt,\"d2 p_{t}\")\n",
    "legend.AddEntry(d3_pt,\"d3 p_{t}\")\n",
    "ROOT.gStyle.SetLegendTextSize(0.05)\n",
    "legend.Draw()\n",
    "c0.Draw()\n",
    "#c0.SaveAs(\"Plots/pt_distributions.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "209257c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "c1=TCanvas(\"c1\",\"eta distributions\",200,10,700,500)\n",
    "c1.cd()\n",
    "d1_eta.SetLineColor(2)\n",
    "d2_eta.SetLineColor(4)\n",
    "d3_eta.SetLineColor(6)\n",
    "d1_eta.SetStats(0) \n",
    "d1_eta.Draw()\n",
    "d2_eta.Draw(\"same\")\n",
    "d3_eta.Draw(\"same\")\n",
    "d1_eta.SetTitle(\"eta distributions\")\n",
    "d1_eta.GetXaxis().SetTitle(\"eta\")\n",
    "d1_eta.GetYaxis().SetTitle(\"number of tracks\")\n",
    "legend=TLegend(0.7,0.8,0.85,0.6)\n",
    "legend.AddEntry(d1_eta,\"d1 eta\")\n",
    "legend.AddEntry(d2_eta,\"d2 eta\")\n",
    "legend.AddEntry(d3_eta,\"d3 eta\")\n",
    "ROOT.gStyle.SetLegendTextSize(0.05)\n",
    "legend.Draw()\n",
    "c1.Draw()\n",
    "#c1.SaveAs(\"Plots/eta_distributions.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b45c196",
   "metadata": {},
   "outputs": [],
   "source": [
    "c2=TCanvas(\"c2\",\"phi distributions\",200,10,700,500)\n",
    "c2.cd()\n",
    "d1_phi.SetLineColor(2)\n",
    "d2_phi.SetLineColor(4)\n",
    "d3_phi.SetLineColor(6)\n",
    "d1_phi.SetStats(0) \n",
    "d1_phi.Draw()\n",
    "d2_phi.Draw(\"same\")\n",
    "d3_phi.Draw(\"same\")\n",
    "d1_phi.SetTitle(\"phi distributions\")\n",
    "d1_phi.GetXaxis().SetTitle(\"phi [rad]\")\n",
    "d1_phi.GetYaxis().SetTitle(\"number of tracks\")\n",
    "legend=TLegend(0.7,0.8,0.85,0.6)\n",
    "legend.AddEntry(d1_phi,\"d1 phi\")\n",
    "legend.AddEntry(d2_phi,\"d2 phi\")\n",
    "legend.AddEntry(d3_phi,\"d3 phi\")\n",
    "ROOT.gStyle.SetLegendTextSize(0.05)\n",
    "legend.Draw()\n",
    "c2.Draw()\n",
    "#c2.SaveAs(\"Plots/eta_distributions.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7db7f47a",
   "metadata": {},
   "outputs": [],
   "source": [
    "c3=TCanvas(\"c3\",\"D invariant mass\",200,10,700,500)\n",
    "c3.cd()\n",
    "D_M.Draw()\n",
    "D_M.GetXaxis().SetTitle(\"invariant mass [Gev/c]\")\n",
    "D_M.GetYaxis().SetTitle(\"number of couples d1 d2\")\n",
    "c3.Draw()\n",
    "#c3.SaveAs(\"Plots/d1 d2 invariant mass.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0b67d8a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "c4=TCanvas(\"c4\",\"B invariant mass\",200,10,700,500)\n",
    "c4.cd()\n",
    "B_M.Draw()\n",
    "B_M.GetXaxis().SetTitle(\"invariant mass [Gev/c]\")\n",
    "B_M.GetYaxis().SetTitle(\"number of couples d1 d2 d3\")\n",
    "c4.Draw()\n",
    "#c4.SaveAs(\"Plots/d1 d2 d3 invariant mass.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0328f4bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "h1=TH1F(\"h1\",\"Efficiency d1 vs d\",100,0,20)\n",
    "h1.Reset()\n",
    "c5=TCanvas('c5','Efficiency d1 vs d',200,10,700,500)\n",
    "c5.cd()\n",
    "Effd1_d=TEfficiency(d1_num_d,d1_den_d)\n",
    "h1.GetXaxis().SetTitle(\"Gen d1 displacement [cm]\")\n",
    "h1.GetYaxis().SetTitle(\"Efficiency\")\n",
    "h1.SetStats(0)\n",
    "h1.Draw()\n",
    "Effd1_d.Draw(\"same\")\n",
    "c5.Draw()\n",
    "#c5.SaveAs(\"Plots/Efficiency_d1_vs_d.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3eb4901b",
   "metadata": {},
   "outputs": [],
   "source": [
    "h2=TH1F(\"h2\",\"Efficiency d2 vs d\",100,0,20)\n",
    "h2.Reset()\n",
    "c6=TCanvas('c6','Efficiency d2 vs d',200,10,700,500)\n",
    "c6.cd()\n",
    "Effd2_d=TEfficiency(d2_num_d,d2_den_d)\n",
    "h2.GetXaxis().SetTitle(\"Gen d2 displacement [cm]\")\n",
    "h2.GetYaxis().SetTitle(\"Efficiency\")\n",
    "h2.SetStats(0)\n",
    "h2.Draw()\n",
    "Effd2_d.Draw(\"same\")\n",
    "c6.Draw()\n",
    "#c6.SaveAs(\"Plots/Efficiency_d2_vs_d.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8530e74b",
   "metadata": {},
   "outputs": [],
   "source": [
    "h3=TH1F(\"h3\",\"Efficiency d3 vs d\",100,0,20)\n",
    "h3.Reset()\n",
    "c7=TCanvas('c7','Efficiency d3 vs d',200,10,700,500)\n",
    "c7.cd()\n",
    "Effd3_d=TEfficiency(d3_num_d,d3_den_d)\n",
    "h3.GetXaxis().SetTitle(\"Gen d3 displacement [cm]\")\n",
    "h3.GetYaxis().SetTitle(\"Efficiency\")\n",
    "h3.SetStats(0)\n",
    "h3.Draw()\n",
    "Effd3_d.Draw(\"same\")\n",
    "c7.Draw()\n",
    "#c7.SaveAs(\"Plots/Efficiency_d3_vs_d.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d7e46c34",
   "metadata": {},
   "outputs": [],
   "source": [
    "h4=TH1F(\"h4\",\"Efficiency d1 vs pt\",100,0,25)\n",
    "h4.Reset()\n",
    "c8=TCanvas('c8','Efficiency d1 vs pt',200,10,700,500)\n",
    "c8.cd()\n",
    "Effd1_pt=TEfficiency(d1_num_pt,d1_den_pt)\n",
    "h4.GetXaxis().SetTitle(\"Gen d1 pt [Gev/c]\")\n",
    "h4.GetYaxis().SetTitle(\"Efficiency\")\n",
    "h4.SetStats(0)\n",
    "h4.Draw()\n",
    "Effd1_pt.Draw(\"same\")\n",
    "c8.Draw()\n",
    "#c8.SaveAs(\"Plots/Efficiency_d1_vs_pt.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "05ea24e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "h5=TH1F(\"h5\",\"Efficiency d2 vs pt\",100,0,25)\n",
    "h5.Reset()\n",
    "c9=TCanvas('c9','Efficiency d2 vs pt',200,10,700,500)\n",
    "c9.cd()\n",
    "Effd2_pt=TEfficiency(d2_num_pt,d2_den_pt)\n",
    "h5.GetXaxis().SetTitle(\"Gen d2 pt [Gev/c]\")\n",
    "h5.GetYaxis().SetTitle(\"Efficiency\")\n",
    "h5.SetStats(0)\n",
    "h5.Draw()\n",
    "Effd2_pt.Draw(\"same\")\n",
    "c9.Draw()\n",
    "#c9.SaveAs(\"Plots/Efficiency_d2_vs_pt.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0fef2cd5",
   "metadata": {},
   "outputs": [],
   "source": [
    "h6=TH1F(\"h6\",\"Efficiency d3 vs pt\",100,0,25)\n",
    "h6.Reset()\n",
    "c10=TCanvas('c9','Efficiency d3 vs pt',200,10,700,500)\n",
    "c10.cd()\n",
    "Effd3_pt=TEfficiency(d3_num_pt,d3_den_pt)\n",
    "h6.GetXaxis().SetTitle(\"Gen d3 pt [Gev/c]\")\n",
    "h6.GetYaxis().SetTitle(\"Efficiency\")\n",
    "h6.SetStats(0)\n",
    "h6.Draw()\n",
    "Effd3_pt.Draw(\"same\")\n",
    "c10.Draw()\n",
    "#c10.SaveAs(\"Plots/Efficiency_d3_vs_pt.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a08fd07f",
   "metadata": {},
   "outputs": [],
   "source": [
    "c11=TCanvas(\"c11\",\"dR of d1\",200,10,700,500)\n",
    "d1_dr.Draw()\n",
    "c11.Draw()\n",
    "#c11.SaveAs(\"Plots/dR_d1.png\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "51f21774",
   "metadata": {},
   "outputs": [],
   "source": [
    "c12=TCanvas(\"c12\",\"dR of d2\",200,10,700,500)\n",
    "d2_dr.Draw()\n",
    "c12.Draw()\n",
    "#c12.SaveAs(\"Plots/dR_d2.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "60b9f113",
   "metadata": {},
   "outputs": [],
   "source": [
    "c13=TCanvas(\"c13\",\"dR of d3\",200,10,700,500)\n",
    "d3_dr.Draw()\n",
    "c13.Draw()\n",
    "#c13.SaveAs(\"Plots/dR_d3.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3760cf4d",
   "metadata": {},
   "outputs": [],
   "source": [
    "h7=TH1F(\"h7\",\"Efficiency D vs pt\",100,0,25)\n",
    "h7.Reset()\n",
    "c14=TCanvas('c14','Efficiency D vs pt',200,10,700,500)\n",
    "c14.cd()\n",
    "EffD_pt=TEfficiency(D_num_pt,D_den_pt)\n",
    "h7.GetXaxis().SetTitle(\"Gen D pt [Gev/c]\")\n",
    "h7.GetYaxis().SetTitle(\"Efficiency\")\n",
    "h7.SetStats(0)\n",
    "h7.Draw()\n",
    "EffD_pt.Draw(\"same\")\n",
    "c14.Draw()\n",
    "#c14.SaveAs(\"Plots/Efficiency_D_vs_pt.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7632fda3",
   "metadata": {},
   "outputs": [],
   "source": [
    "h8=TH1F(\"h8\",\"Efficiency B vs pt\",100,0,25)\n",
    "h8.Reset()\n",
    "c15=TCanvas('c15','Efficiency B vs pt',200,10,700,500)\n",
    "c15.cd()\n",
    "EffB_pt=TEfficiency(B_num_pt,B_den_pt)\n",
    "h8.GetXaxis().SetTitle(\"Gen B pt [Gev/c]\")\n",
    "h8.GetYaxis().SetTitle(\"Efficiency\")\n",
    "h8.SetStats(0)\n",
    "h8.Draw()\n",
    "EffB_pt.Draw(\"same\")\n",
    "c15.Draw()\n",
    "#c15.SaveAs(\"Plots/Efficiency_B_vs_pt.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "423f06a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "c16=TCanvas(\"c16\",\"dR of D\",200,10,700,500)\n",
    "D_dr.Draw()\n",
    "c16.Draw()\n",
    "#c16.SaveAs(\"Plots/dR_D.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "55f420bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "c17=TCanvas(\"c17\",\"dR of B\",200,10,700,500)\n",
    "B_dr.Draw()\n",
    "c17.Draw()\n",
    "#c17.SaveAs(\"Plots/dR_B.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ce50778c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "87f848e0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7d0a1ba7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d8aa66b4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "95005767",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "@webio": {
   "lastCommId": null,
   "lastKernelId": null
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
