{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "592c7e2d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning in <TClass::Init>: no dictionary for class edm::Hash<1> is available\n",
      "Warning in <TClass::Init>: no dictionary for class edm::ProcessHistory is available\n",
      "Warning in <TClass::Init>: no dictionary for class edm::ProcessConfiguration is available\n",
      "Warning in <TClass::Init>: no dictionary for class edm::ParameterSetBlob is available\n",
      "Warning in <TClass::Init>: no dictionary for class pair<edm::Hash<1>,edm::ParameterSetBlob> is available\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Booking all histograms...\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "start = time.time()\n",
    "import os\n",
    "import ROOT\n",
    "ROOT.gSystem.Load(\"libGenVector\")\n",
    "from ROOT import RDataFrame, RVec\n",
    "from ROOT import TChain, TSelector, TTree, TH1F, TCanvas, TFile, TEfficiency, TLegend,TLine\n",
    "from ROOT import Math\n",
    "from ROOT import TLorentzVector\n",
    "from ROOT import TVector3\n",
    "from array import array\n",
    "import numpy as np\n",
    "\n",
    "ROOT.gInterpreter.Reset()\n",
    "\n",
    "ROOT.EnableImplicitMT()\n",
    "print(ROOT.ROOT.IsImplicitMTEnabled())\n",
    "ROOT.gROOT.SetBatch(ROOT.kTRUE)\n",
    "folder=\"/eos/user/f/fsimone/B_Dh_summerproject/bphnano/B_to_DK_KpiK_Run3Summer24NanoAOD_v0_2025Aug27/B_to_DK_KpiK__TuneCP5_13p6TeV_pythia8_Run3Summer24GS_v1/B_to_DK_KpiK__Run3Summer24NanoAOD_v0/250827_105043\"\n",
    "tree=TChain(\"Events\")\n",
    "for fol,subfolders,files in os.walk(folder):\n",
    "    for file in files:\n",
    "        if file.endswith(\".root\"):\n",
    "            tree.Add(fol+\"/\"+file)\n",
    "\n",
    "\n",
    "df = RDataFrame(tree)\n",
    "decay=\"KpiK\"\n",
    "id1 = [321,-321]\n",
    "id2 = [211,-211]\n",
    "id3 = 321\n",
    "t = False\n",
    "th1 = 0.01\n",
    "th2 = 0.01\n",
    "th3 = 0.01\n",
    "\n",
    "cpp_code = \"\"\"\n",
    "#include <ROOT/RVec.hxx>\n",
    "#include <Math/Vector4Dfwd.h>\n",
    "#include <Math/VectorUtil.h>\n",
    "#include <TDatabasePDG.h>\n",
    "#include <TMath.h>\n",
    "#include <map>\n",
    "#include <set>\n",
    "#include <tuple>\n",
    "#include <vector>\n",
    "#include <algorithm>\n",
    "#include <iterator>\n",
    "#include <utility>\n",
    "\n",
    "using namespace ROOT;\n",
    "using namespace ROOT::Math;\n",
    "\n",
    "struct GenParticle {\n",
    "    PtEtaPhiMVector p4;\n",
    "    int midx;\n",
    "    int typ;\n",
    "    int pdgId;\n",
    "    float pt;\n",
    "    float dist;\n",
    "};\n",
    "\n",
    "using Matched = std::tuple<PtEtaPhiMVector, int, PtEtaPhiMVector>;\n",
    "\n",
    "struct Results {\n",
    "    std::vector<RVec<float>> vecs;\n",
    "    float muon_count;\n",
    "    float reco_count;\n",
    "    float acc_count;\n",
    "};\n",
    "\n",
    "std::vector<Matched> matching_m(const RVec<float>& g_eta, const RVec<float>& g_phi, const RVec<float>& g_pt, const RVec<float>& g_mass, const RVec<int>& g_midx,\n",
    "                                  const std::vector<Matched>& p, const std::vector<Matched>& m,\n",
    "                                  RVec<float>& hDen, RVec<float>& hNum, RVec<float>& hdR, float th, RVec<float>& hIM) {\n",
    "    std::vector<Matched> matches;\n",
    "    for (const auto& plus : p) {\n",
    "        for (const auto& minus_ : m) {\n",
    "            if (std::get<1>(plus) == std::get<1>(minus_)) {\n",
    "                int idx = std::get<1>(plus);\n",
    "                PtEtaPhiMVector GenMother(g_pt[idx], g_eta[idx], g_phi[idx], g_mass[idx]);\n",
    "                PtEtaPhiMVector RecoMother = std::get<2>(plus) + std::get<2>(minus_);\n",
    "                float dr = VectorUtil::DeltaR(GenMother, RecoMother);\n",
    "                hIM.push_back(RecoMother.M());\n",
    "                hdR.push_back(dr);\n",
    "                hNum.push_back(g_pt[idx]);\n",
    "                matches.emplace_back(GenMother, g_midx[idx], RecoMother);\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "    return matches;\n",
    "}\n",
    "\n",
    "\n",
    "void matching_func(std::vector<GenParticle>& Gp, std::vector<PtEtaPhiMVector>& Tp,\n",
    "                   RVec<float>& d1_num_pt, RVec<float>& d2_num_pt, RVec<float>& d3_num_pt,\n",
    "                   RVec<float>& d1_num_d, RVec<float>& d2_num_d, RVec<float>& d3_num_d,\n",
    "                   RVec<float>& d1_dr, RVec<float>& d2_dr, RVec<float>& d3_dr,\n",
    "                   std::vector<Matched>& m1, std::vector<Matched>& m2, std::vector<Matched>& m3,\n",
    "                   float th1, float th2, float th3) {\n",
    "    TDatabasePDG *pdg_db = TDatabasePDG::Instance();\n",
    "    bool go = true;\n",
    "    while (go) {\n",
    "        go = false;\n",
    "        std::map<int, std::set<std::pair<int, float>>> match_map;\n",
    "        int i = 0;\n",
    "        while (i < Gp.size()) {\n",
    "            float dR0 = 1000.0f;\n",
    "            int idx = 0;\n",
    "            for (int j = 0; j < Tp.size(); ++j) {\n",
    "                float dR = VectorUtil::DeltaR(Gp[i].p4, Tp[j]);\n",
    "                if (dR < dR0) {\n",
    "                    dR0 = dR;\n",
    "                    idx = j;\n",
    "                }\n",
    "            }\n",
    "            int typ = Gp[i].typ;\n",
    "            float th = (typ == 1 ? th1 : (typ == 2 ? th2 : th3));\n",
    "            if (dR0 < th) {\n",
    "                auto& s = match_map[idx];\n",
    "                s.emplace(i, dR0);\n",
    "                if (s.size() > 1) go = true;\n",
    "                ++i;\n",
    "            } else {\n",
    "                if (typ == 1) d1_dr.push_back(dR0);\n",
    "                else if (typ == 2) d2_dr.push_back(dR0);\n",
    "                else d3_dr.push_back(dR0);\n",
    "                Gp.erase(Gp.begin() + i);\n",
    "            }\n",
    "        }\n",
    "        std::vector<int> l_g, l_t;\n",
    "        for (const auto& kv : match_map) {\n",
    "            int e = kv.first;\n",
    "            const auto& s = kv.second;\n",
    "            float dr = 1000.0f;\n",
    "            int ind = 0;\n",
    "            for (const auto& el : s) {\n",
    "                if (el.second < dr) {\n",
    "                    dr = el.second;\n",
    "                    ind = el.first;\n",
    "                }\n",
    "            }\n",
    "            int typ = Gp[ind].typ;\n",
    "            int pdgid = Gp[ind].pdgId;\n",
    "            double mass = pdg_db->GetParticle(pdgid)->Mass();\n",
    "            Tp[e] = PtEtaPhiMVector(Tp[e].Pt(), Tp[e].Eta(), Tp[e].Phi(), mass);\n",
    "            if (typ == 1) {\n",
    "                d1_num_pt.push_back(Gp[ind].pt);\n",
    "                d1_dr.push_back(dr);\n",
    "                d1_num_d.push_back(Gp[ind].dist);\n",
    "                m1.emplace_back(Gp[ind].p4, Gp[ind].midx, Tp[e]);\n",
    "            } else if (typ == 2) {\n",
    "                d2_num_pt.push_back(Gp[ind].pt);\n",
    "                d2_dr.push_back(dr);\n",
    "                d2_num_d.push_back(Gp[ind].dist);\n",
    "                m2.emplace_back(Gp[ind].p4, Gp[ind].midx, Tp[e]);\n",
    "            } else {\n",
    "                d3_num_pt.push_back(Gp[ind].pt);\n",
    "                d3_dr.push_back(dr);\n",
    "                d3_num_d.push_back(Gp[ind].dist);\n",
    "                m3.emplace_back(Gp[ind].p4, Gp[ind].midx, Tp[e]);\n",
    "            }\n",
    "            l_g.push_back(ind);\n",
    "            l_t.push_back(e);\n",
    "        }\n",
    "        std::sort(l_g.begin(), l_g.end(), std::greater<int>());\n",
    "        std::sort(l_t.begin(), l_t.end(), std::greater<int>());\n",
    "        for (auto eg : l_g) {\n",
    "            Gp.erase(Gp.begin() + eg);\n",
    "        }\n",
    "        for (auto et : l_t) {\n",
    "            Tp.erase(Tp.begin() + et);\n",
    "        }\n",
    "    }\n",
    "}\n",
    "\n",
    "Results main_func(const RVec<float>& g_pt, const RVec<float>& g_eta, const RVec<float>& g_phi, const RVec<float>& g_mass,\n",
    "                  const RVec<int>& g_id, const RVec<int>& st, const RVec<int>& g_midx,\n",
    "                  const RVec<float>& t_pt, const RVec<float>& t_eta, const RVec<float>& t_phi, const RVec<int>& t_ch, const RVec<float>& t_mass,\n",
    "                  const RVec<float>& g_vx, const RVec<float>& g_vy, const RVec<float>& g_vz,\n",
    "                  const RVec<float>& m_eta, const RVec<float>& m_pt, bool t_opt,\n",
    "                  const RVec<int>& id1, const RVec<int>& id2, int id3,\n",
    "                  float th1, float th2, float th3) {\n",
    "    Results res;\n",
    "    res.muon_count = 0;\n",
    "    res.reco_count = 0;\n",
    "    res.acc_count = 0;\n",
    "    TDatabasePDG *pdg = TDatabasePDG::Instance();\n",
    "    std::map<int, std::vector<GenParticle>> d;\n",
    "    std::vector<GenParticle> Gp, Gm;\n",
    "    RVec<float> d1_num_pt, d2_num_pt, d3_num_pt, d1_num_d, d2_num_d, d3_num_d, d1_den_pt, d2_den_pt, d3_den_pt, d1_den_d, d2_den_d, d3_den_d, d1_dr, d2_dr, d3_dr;\n",
    "    RVec<float> B_num_pt, D_num_pt, B_den_pt, D_den_pt, B_dr, D_dr, B_M, D_M;\n",
    "    RVec<float> d1_eta, d2_eta, d3_eta, d1_phi, d2_phi, d3_phi, d1_gen_eta, d2_gen_eta, d3_gen_eta, d1_gen_phi, d2_gen_phi, d3_gen_phi, d1_pt, d2_pt, d3_pt;\n",
    "    bool go = false;\n",
    "    if (t_opt) {\n",
    "        for (size_t im = 0; im < m_eta.size(); ++im) {\n",
    "            if (std::abs(m_eta[im]) < 1.5 && m_pt[im] > 9) {\n",
    "                go = true;\n",
    "                break;\n",
    "            }\n",
    "        }\n",
    "    } else {\n",
    "        go = true;\n",
    "    }\n",
    "\n",
    "    auto is_in = [](int id, const RVec<int>& vec) {\n",
    "        return std::find(vec.begin(), vec.end(), id) != vec.end();\n",
    "    };\n",
    "\n",
    "    for (size_t i = 0; i < g_id.size(); ++i) {\n",
    "        if (abs(g_id[i]) == 13 && g_pt[i] > 9 && std::abs(g_eta[i]) < 1.5){\n",
    "            res.muon_count = 1;\n",
    "        }\n",
    "        if (st[i] == 1 && g_pt[i] > 0.5 && std::abs(g_eta[i]) < 2.4) {\n",
    "            int midx = g_midx[i];\n",
    "            if (is_in(g_id[i], id1) && std::abs(g_id[midx]) == 421) {\n",
    "                int gmidx = g_midx[midx];\n",
    "                if (std::abs(g_id[gmidx]) == 521) {\n",
    "                    PtEtaPhiMVector GenP(g_pt[i], g_eta[i], g_phi[i], pdg->GetParticle(g_id[i])->Mass());\n",
    "                    float dist = TMath::Sqrt(g_vx[i] * g_vx[i] + g_vy[i] * g_vy[i] + g_vz[i] * g_vz[i]);\n",
    "                    d[gmidx].push_back({GenP, midx, 1, g_id[i], g_pt[i], dist});\n",
    "                }\n",
    "            } else if (is_in(g_id[i], id2) && std::abs(g_id[midx]) == 421) {\n",
    "                int gmidx = g_midx[midx];\n",
    "                if (std::abs(g_id[gmidx]) == 521) {\n",
    "                    PtEtaPhiMVector GenP(g_pt[i], g_eta[i], g_phi[i], pdg->GetParticle(g_id[i])->Mass());\n",
    "                    float dist = TMath::Sqrt(g_vx[i] * g_vx[i] + g_vy[i] * g_vy[i] + g_vz[i] * g_vz[i]);\n",
    "                    d[gmidx].push_back({GenP, midx, 2, g_id[i], g_pt[i], dist});\n",
    "                }\n",
    "            } else if (g_id[i] == -id3 && g_id[midx] == -521) {\n",
    "                PtEtaPhiMVector GenP(g_pt[i], g_eta[i], g_phi[i], pdg->GetParticle(g_id[i])->Mass());\n",
    "                float dist = TMath::Sqrt(g_vx[i] * g_vx[i] + g_vy[i] * g_vy[i] + g_vz[i] * g_vz[i]);\n",
    "                d[midx].push_back({GenP, midx, 3, g_id[i], g_pt[i], dist});\n",
    "            } else if (g_id[i] == id3 && g_id[midx] == 521) {\n",
    "                PtEtaPhiMVector GenP(g_pt[i], g_eta[i], g_phi[i], pdg->GetParticle(g_id[i])->Mass());\n",
    "                float dist = TMath::Sqrt(g_vx[i] * g_vx[i] + g_vy[i] * g_vy[i] + g_vz[i] * g_vz[i]);\n",
    "                d[midx].push_back({GenP, midx, 3, g_id[i], g_pt[i], dist});\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "    for (const auto& pair : d) {\n",
    "        int B = pair.first;\n",
    "        const auto& parts = pair.second;\n",
    "        int c1 = 0; int c2 = 0; int c3 = 0;\n",
    "        for (const auto& el : parts){\n",
    "            if (el.typ == 1) c1++;\n",
    "            if (el.typ == 2) c2++;\n",
    "            if (el.typ == 3) c3++;\n",
    "        }\n",
    "        if (c1 == 1 && c2 == 1 && c3 == 1) {\n",
    "            GenParticle d_1, d_2, d_3;\n",
    "            res.acc_count = 1;\n",
    "            for (const auto& e : parts) {\n",
    "                int typ = e.typ;\n",
    "                if (typ == 1) {\n",
    "                    d_1 = e;\n",
    "                    B_den_pt.push_back(g_pt[B]);\n",
    "                    D_den_pt.push_back(g_pt[e.midx]);\n",
    "                } else if (typ == 2) {\n",
    "                    d_2 = e;\n",
    "                } else if (typ == 3){\n",
    "                    d_3 = e;\n",
    "                    d3_den_pt.push_back(d_3.pt);\n",
    "                    d3_den_d.push_back(d_3.dist);\n",
    "                    d3_gen_eta.push_back(d_3.p4.Eta());\n",
    "                    d3_gen_phi.push_back(d_3.p4.Phi());\n",
    "                    if (pdg->GetParticle(d_3.pdgId)->Charge() > 0) Gp.push_back(d_3);\n",
    "                    else Gm.push_back(d_3);\n",
    "                }\n",
    "            }\n",
    "            if (d_1.pt < d_2.pt){\n",
    "                d1_den_pt.push_back(d_1.pt); d1_den_d.push_back(d_1.dist); d1_gen_eta.push_back(d_1.p4.Eta()); d1_gen_phi.push_back(d_1.p4.Phi());\n",
    "                if (pdg->GetParticle(d_1.pdgId)->Charge() > 0) Gp.push_back(d_1); else Gm.push_back(d_1);\n",
    "\n",
    "                d2_den_pt.push_back(d_2.pt); d2_den_d.push_back(d_2.dist); d2_gen_eta.push_back(d_2.p4.Eta()); d2_gen_phi.push_back(d_2.p4.Phi());\n",
    "                if (pdg->GetParticle(d_2.pdgId)->Charge() > 0) Gp.push_back(d_2); else Gm.push_back(d_2);\n",
    "            } else {\n",
    "                d_1.typ = 2; d_2.typ = 1;\n",
    "                d1_den_pt.push_back(d_2.pt); d1_den_d.push_back(d_2.dist); d1_gen_eta.push_back(d_2.p4.Eta()); d1_gen_phi.push_back(d_2.p4.Phi());\n",
    "                if (pdg->GetParticle(d_2.pdgId)->Charge() > 0) Gp.push_back(d_2); else Gm.push_back(d_2);\n",
    "\n",
    "                d2_den_pt.push_back(d_1.pt); d2_den_d.push_back(d_1.dist); d2_gen_eta.push_back(d_1.p4.Eta()); d2_gen_phi.push_back(d_1.p4.Phi());\n",
    "                if (pdg->GetParticle(d_1.pdgId)->Charge() > 0) Gp.push_back(d_1); else Gm.push_back(d_1);\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "    if (go) {\n",
    "        std::vector<PtEtaPhiMVector> Tp, Tm;\n",
    "        for (size_t it = 0; it < t_ch.size(); ++it) {\n",
    "            if ( t_pt[it] > 0.5 && std::abs(t_eta[it])<2.4 ) {\n",
    "                PtEtaPhiMVector Track(t_pt[it], t_eta[it], t_phi[it], t_mass[it]);\n",
    "                if (t_ch[it] == 1 ) Tp.push_back(Track);\n",
    "                else if (t_ch[it] == -1) Tm.push_back(Track);\n",
    "            }\n",
    "        }\n",
    "        std::vector<Matched> m1a, m2a, m3a;\n",
    "        matching_func(Gp, Tp, d1_num_pt, d2_num_pt, d3_num_pt, d1_num_d, d2_num_d, d3_num_d, d1_dr, d2_dr, d3_dr, m1a, m2a, m3a, th1, th2, th3);\n",
    "        std::vector<Matched> m1b, m2b, m3b;\n",
    "        matching_func(Gm, Tm, d1_num_pt, d2_num_pt, d3_num_pt, d1_num_d, d2_num_d, d3_num_d, d1_dr, d2_dr, d3_dr, m1b, m2b, m3b, th1, th2, th3);\n",
    "\n",
    "        std::vector<Matched> m1; m1.reserve(m1a.size() + m1b.size()); m1.insert(m1.end(), m1a.begin(), m1a.end()); m1.insert(m1.end(), m1b.begin(), m1b.end());\n",
    "        std::vector<Matched> m2; m2.reserve(m2a.size() + m2b.size()); m2.insert(m2.end(), m2a.begin(), m2a.end()); m2.insert(m2.end(), m2b.begin(), m2b.end());\n",
    "        std::vector<Matched> m3; m3.reserve(m3a.size() + m3b.size()); m3.insert(m3.end(), m3a.begin(), m3a.end()); m3.insert(m3.end(), m3b.begin(), m3b.end());\n",
    "        for (const auto& e : m1) { const auto& reco = std::get<2>(e); d1_pt.push_back(reco.Pt()); d1_eta.push_back(reco.Eta()); d1_phi.push_back(reco.Phi()); }\n",
    "        for (const auto& e : m2) { const auto& reco = std::get<2>(e); d2_pt.push_back(reco.Pt()); d2_eta.push_back(reco.Eta()); d2_phi.push_back(reco.Phi()); }\n",
    "        for (const auto& e : m3) { const auto& reco = std::get<2>(e); d3_pt.push_back(reco.Pt()); d3_eta.push_back(reco.Eta()); d3_phi.push_back(reco.Phi()); }\n",
    "        std::vector<Matched> mD = matching_m(g_eta, g_phi, g_pt, g_mass, g_midx, m1, m2, D_den_pt, D_num_pt, D_dr, 0.05f, D_M);\n",
    "        std::vector<Matched> mB = matching_m(g_eta, g_phi, g_pt, g_mass, g_midx, mD, m3, B_den_pt, B_num_pt, B_dr, 0.05f, B_M);\n",
    "        if (mB.size() > 0){\n",
    "            res.reco_count = 1;\n",
    "        }\n",
    "    }\n",
    "    res.vecs.reserve(38);\n",
    "    res.vecs = {d1_num_pt, d2_num_pt, d3_num_pt, d1_num_d, d2_num_d, d3_num_d, d1_den_pt, d2_den_pt, d3_den_pt, d1_den_d, d2_den_d, d3_den_d, d1_dr, d2_dr, d3_dr, B_num_pt, D_num_pt, B_den_pt, D_den_pt, B_dr, D_dr, B_M, D_M, d1_eta, d2_eta, d3_eta, d1_phi, d2_phi, d3_phi, d1_pt, d2_pt, d3_pt, d1_gen_phi, d2_gen_phi, d3_gen_phi, d1_gen_eta, d2_gen_eta, d3_gen_eta};\n",
    "    return res;\n",
    "}\n",
    "\"\"\"\n",
    "\n",
    "ROOT.gInterpreter.Declare(cpp_code)\n",
    "\n",
    "id1_cpp = f\"ROOT::RVec<int>{{{', '.join(map(str, id1))}}}\"\n",
    "id2_cpp = f\"ROOT::RVec<int>{{{', '.join(map(str, id2))}}}\"\n",
    "\n",
    "df1 = df.Define(\"results\", f\"main_func(GenPart_pt, GenPart_eta, GenPart_phi, GenPart_mass, GenPart_pdgId, GenPart_status, GenPart_genPartIdxMother, Track_pt, Track_eta, Track_phi, Track_charge, Track_mass, GenPart_vx, GenPart_vy, GenPart_vz, AllMuon_eta, AllMuon_pt, {1 if t else 0}, {id1_cpp}, {id2_cpp}, {id3}, {th1}, {th2}, {th3})\") \\\n",
    "        .Define(\"d1_num_pt\", \"results.vecs[0]\") \\\n",
    "        .Define(\"d2_num_pt\", \"results.vecs[1]\") \\\n",
    "        .Define(\"d3_num_pt\", \"results.vecs[2]\") \\\n",
    "        .Define(\"d1_num_d\", \"results.vecs[3]\") \\\n",
    "        .Define(\"d2_num_d\", \"results.vecs[4]\") \\\n",
    "        .Define(\"d3_num_d\", \"results.vecs[5]\") \\\n",
    "        .Define(\"d1_den_pt\", \"results.vecs[6]\") \\\n",
    "        .Define(\"d2_den_pt\", \"results.vecs[7]\") \\\n",
    "        .Define(\"d3_den_pt\", \"results.vecs[8]\") \\\n",
    "        .Define(\"d1_den_d\", \"results.vecs[9]\") \\\n",
    "        .Define(\"d2_den_d\", \"results.vecs[10]\") \\\n",
    "        .Define(\"d3_den_d\", \"results.vecs[11]\") \\\n",
    "        .Define(\"d1_dr\", \"results.vecs[12]\") \\\n",
    "        .Define(\"d2_dr\", \"results.vecs[13]\") \\\n",
    "        .Define(\"d3_dr\", \"results.vecs[14]\") \\\n",
    "        .Define(\"B_num_pt\", \"results.vecs[15]\") \\\n",
    "        .Define(\"D_num_pt\", \"results.vecs[16]\") \\\n",
    "        .Define(\"B_den_pt\", \"results.vecs[17]\") \\\n",
    "        .Define(\"D_den_pt\", \"results.vecs[18]\") \\\n",
    "        .Define(\"B_dr\", \"results.vecs[19]\") \\\n",
    "        .Define(\"D_dr\", \"results.vecs[20]\") \\\n",
    "        .Define(\"B_M\", \"results.vecs[21]\") \\\n",
    "        .Define(\"D_M\", \"results.vecs[22]\") \\\n",
    "        .Define(\"d1_eta\", \"results.vecs[23]\") \\\n",
    "        .Define(\"d2_eta\", \"results.vecs[24]\") \\\n",
    "        .Define(\"d3_eta\", \"results.vecs[25]\") \\\n",
    "        .Define(\"d1_phi\", \"results.vecs[26]\") \\\n",
    "        .Define(\"d2_phi\", \"results.vecs[27]\") \\\n",
    "        .Define(\"d3_phi\", \"results.vecs[28]\") \\\n",
    "        .Define(\"d1_pt\", \"results.vecs[29]\") \\\n",
    "        .Define(\"d2_pt\", \"results.vecs[30]\") \\\n",
    "        .Define(\"d3_pt\", \"results.vecs[31]\") \\\n",
    "        .Define(\"d1_gen_phi\", \"results.vecs[32]\") \\\n",
    "        .Define(\"d2_gen_phi\", \"results.vecs[33]\") \\\n",
    "        .Define(\"d3_gen_phi\", \"results.vecs[34]\") \\\n",
    "        .Define(\"d1_gen_eta\", \"results.vecs[35]\") \\\n",
    "        .Define(\"d2_gen_eta\", \"results.vecs[36]\") \\\n",
    "        .Define(\"d3_gen_eta\", \"results.vecs[37]\") \\\n",
    "        .Define(\"muon_counter\", \"results.muon_count\")\\\n",
    "        .Define(\"reco_counter\", \"results.reco_count\")\\\n",
    "        .Define(\"acc_counter\", \"results.acc_count\")\n",
    "\n",
    "ROOT.gErrorIgnoreLevel = ROOT.kError\n",
    "\n",
    "branches = [\"d1_num_pt\", \"d2_num_pt\", \"d3_num_pt\", \"d1_den_pt\", \"d2_den_pt\", \"d3_den_pt\", \"d1_dr\", \"d2_dr\", \"d3_dr\", \"B_num_pt\", \"D_num_pt\", \"B_den_pt\", \"D_den_pt\", \"B_dr\", \"D_dr\",\"B_M\",\"D_M\",\"d1_pt\",\"d2_pt\",\"d3_pt\",\"d1_eta\",\"d2_eta\",\"d3_eta\",\"d1_phi\",\"d2_phi\",\"d3_phi\",\"d1_gen_eta\",\"d2_gen_eta\",\"d3_gen_eta\",\"d1_gen_phi\",\"d2_gen_phi\",\"d3_gen_phi\"]\n",
    "\n",
    "binning = {\n",
    "    \"d1_eta\": (100, -2.5, 2.5), \"d1_phi\": (100, -4, 4), \"d2_eta\": (100, -2.5, 2.5),\n",
    "    \"d2_phi\": (100, -4, 4), \"d3_eta\": (100, -2.5, 2.5), \"d3_phi\": (100, -4, 4),\n",
    "    \"d1_dr\": (100,0,0.05), \"d2_dr\": (100,0,0.05), \"d3_dr\": (100,0,0.05),\n",
    "    \"B_dr\": (100,0,0.1), \"D_dr\": (100,0,0.1), \"B_M\": (100,4.8,5.8), \"D_M\": (100,1.5,2.25),\n",
    "    \"d1_gen_eta\": (100, -2.5, 2.5), \"d1_gen_phi\": (100, -4, 4), \"d2_gen_eta\": (100, -2.5, 2.5),\n",
    "    \"d2_gen_phi\": (100, -4, 4), \"d3_gen_eta\": (100, -2.5, 2.5), \"d3_gen_phi\": (100, -4, 4)\n",
    "}\n",
    "\n",
    "histo_pointers = {}\n",
    "print(\"Booking all histograms...\")\n",
    "for branch in branches:\n",
    "    nbins, min_val, max_val = binning.get(branch, (100, 0, 25))\n",
    "    model = ROOT.RDF.TH1DModel(f\"hist_{branch}\", f\"{branch};Value;Entries\", nbins, min_val, max_val)\n",
    "    histo_pointers[branch] = df1.Histo1D(model, branch)\n",
    "\n",
    "model = ROOT.RDF.TH2DModel(\"hist_eta_phi_reco_final_state_1\", \"eta_phi_reco_distribution_final_state_1;Eta;Phi\", 100, -2.5, 2.5,100,-4,4)\n",
    "histo_pointers[\"eta_phi_reco_final_state_1\"] = df1.Histo2D(model,\"d1_eta\",\"d1_phi\")\n",
    "model = ROOT.RDF.TH2DModel(\"hist_eta_phi_reco_final_state_2\", \"eta_phi_reco_distribution_final_state_2;Eta;Phi\", 100, -2.5, 2.5,100,-4,4)\n",
    "histo_pointers[\"eta_phi_reco_final_state_2\"] = df1.Histo2D(model,\"d2_eta\",\"d2_phi\")\n",
    "model = ROOT.RDF.TH2DModel(\"hist_eta_phi_reco_final_state_3\", \"eta_phi_reco_distribution_final_state_3;Eta;Phi\", 100, -2.5, 2.5,100,-4,4)\n",
    "histo_pointers[\"eta_phi_reco_final_state_3\"] = df1.Histo2D(model,\"d3_eta\",\"d3_phi\")\n",
    "model = ROOT.RDF.TH2DModel(\"hist_eta_phi_gen_final_state_1\", \"eta_gen_distribution_final_state_1;Eta;Phi\", 100, -2.5, 2.5,100,-4,4)\n",
    "histo_pointers[\"eta_phi_gen_final_state_1\"] = df1.Histo2D(model,\"d1_gen_eta\",\"d1_gen_phi\")\n",
    "model = ROOT.RDF.TH2DModel(\"hist_eta_phi_gen_final_state_2\", \"eta_gen_distribution_final_state_2;Eta;Phi\", 100, -2.5, 2.5,100,-4,4)\n",
    "histo_pointers[\"eta_phi_gen_final_state_2\"] = df1.Histo2D(model,\"d2_gen_eta\",\"d2_gen_phi\")\n",
    "model = ROOT.RDF.TH2DModel(\"hist_eta_phi_gen_final_state_3\", \"eta_gen_distribution_final_state_3;Eta;Phi\", 100, -2.5, 2.5,100,-4,4)\n",
    "histo_pointers[\"eta_phi_gen_final_state_3\"] = df1.Histo2D(model,\"d3_gen_eta\",\"d3_gen_phi\")\n",
    "\n",
    "muon_count_ptr = df1.Sum(\"muon_counter\")\n",
    "reco_count_ptr = df1.Sum(\"reco_counter\")\n",
    "acc_count_ptr = df1.Sum(\"acc_counter\")\n",
    "total_ptr = df1.Count()\n",
    "\n",
    "print(\"Triggering event loop to fill all histograms and compute sums...\")\n",
    "dummy = list(histo_pointers.values())[0].GetValue()\n",
    "\n",
    "f = {}\n",
    "for branch, ptr in histo_pointers.items():\n",
    "    print(f\"Retrieving histogram for {branch}...\")\n",
    "    f[branch] = ptr.GetValue()\n",
    "\n",
    "muon_count = muon_count_ptr.GetValue()\n",
    "reco_count = reco_count_ptr.GetValue()\n",
    "acc_count = acc_count_ptr.GetValue()\n",
    "total = total_ptr.GetValue()\n",
    "print(\"total evets:\",total,\"-trigger events number:\",muon_count,\"-reconstructed events number:\",reco_count,\"-acceptance events number:\",acc_count)\n",
    "\n",
    "print(\"Saving histograms to file...\")\n",
    "out_file = ROOT.TFile(\"histograms\"+decay+\".root\", \"RECREATE\")\n",
    "for hist in f.values():\n",
    "    hist.Write()\n",
    "out_file.Close()\n",
    "print(f\"All histograms saved in histograms{decay}.root\")\n",
    "end = time.time()\n",
    "print(f\"Tempo di esecuzione: {end - start:.3f} secondi\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "44fde663",
   "metadata": {},
   "outputs": [],
   "source": [
    "name=\"Plots_\"+decay\n",
    "os.system(\"mkdir -p \"+name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8033ddf9",
   "metadata": {},
   "outputs": [],
   "source": [
    "c_eff = TCanvas(\"c_eff\", \"lower pt D daughter Efficiency\", 700, 500)\n",
    "num = f[\"d1_num_pt\"]\n",
    "den = f[\"d1_den_pt\"]\n",
    "eff = ROOT.TEfficiency(num, den)\n",
    "eff.SetTitle(\"(\"+decay+\")\"+\"Efficiency of lower pt D-daughter vs pt ; p_{t} [GeV/c]; Efficiency\")\n",
    "eff.Draw()\n",
    "c_eff.SaveAs(name+\"/efficiency_d1_vs_pt.png\")\n",
    "c_eff.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8b8e1e8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "c_eff = TCanvas(\"c_eff\", \"higher pt D daughter Efficiency\", 700, 500)\n",
    "num = f[\"d2_num_pt\"]\n",
    "den = f[\"d2_den_pt\"]\n",
    "eff = ROOT.TEfficiency(num, den)\n",
    "eff.SetTitle(\"(\"+decay+\")\"+\"Efficiency of higher pt D-daughter vs pt; p_{t} [GeV]; Efficiency\")\n",
    "eff.Draw()\n",
    "c_eff.SaveAs(name+\"/efficiency_d2_vs_pt.png\")\n",
    "c_eff.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a584f6ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "c_eff = TCanvas(\"c_eff\", \"B final state daughter Efficiency\", 700, 500)\n",
    "num = f[\"d3_num_pt\"]\n",
    "den = f[\"d3_den_pt\"]\n",
    "eff = ROOT.TEfficiency(num, den)\n",
    "eff.SetTitle(\"(\"+decay+\")\"+\"Efficiency final state B-daughter vs pt; p_{t} [GeV]; Efficiency\")\n",
    "eff.Draw()\n",
    "c_eff.SaveAs(name+\"/efficiency_d3_vs_pt.png\")\n",
    "c_eff.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13b1e596",
   "metadata": {},
   "outputs": [],
   "source": [
    "c_eff = TCanvas(\"c_eff\", \"D Efficiency pt\", 700, 500)\n",
    "num = f[\"D_num_pt\"]\n",
    "den = f[\"D_den_pt\"]\n",
    "eff = ROOT.TEfficiency(num, den)\n",
    "eff.SetTitle(\"(\"+decay+\")\"+\"Efficiency D vs pt; p_{t} [Gev]; Efficiency\")\n",
    "eff.Draw()\n",
    "c_eff.SaveAs(name+\"/efficiency_D_vs_pt.png\")\n",
    "c_eff.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e150a4c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "c_eff = TCanvas(\"c_eff\", \"B Efficiency pt\", 700, 500)\n",
    "num = f[\"B_num_pt\"]\n",
    "den = f[\"B_den_pt\"]\n",
    "eff = ROOT.TEfficiency(num, den)\n",
    "eff.SetTitle(\"(\"+decay+\")\"+\"Efficiency B vs pt; p_{t} [Gev]; Efficiency\")\n",
    "eff.Draw()\n",
    "c_eff.SaveAs(name+\"/efficiency_B_vs_pt.png\")\n",
    "c_eff.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2203aeca",
   "metadata": {},
   "outputs": [],
   "source": [
    "c0=TCanvas(\"c0\",\"pt reco distributions\",200,10,700,500)\n",
    "c0.cd()\n",
    "hd1=f[\"d1_pt\"]\n",
    "hd2=f[\"d2_pt\"]\n",
    "hd3=f[\"d3_pt\"]\n",
    "print(hd1.Integral())\n",
    "print(hd2.Integral())\n",
    "print(hd3.Integral())\n",
    "hd1.SetLineColor(2)\n",
    "hd2.SetLineColor(4)\n",
    "hd3.SetLineColor(6)\n",
    "hd1.SetStats(0) \n",
    "hd1.Draw()\n",
    "hd2.Draw(\"same\")\n",
    "hd3.Draw(\"same\")\n",
    "hd1.SetTitle(\"(\"+decay+\")\"+\"Pt reco distributions\")\n",
    "hd1.GetXaxis().SetTitle(\"p_{t} [Gev/c]\")\n",
    "hd1.GetYaxis().SetTitle(\"entries\")\n",
    "legend=TLegend(0.5,0.8,0.85,0.6)\n",
    "legend.AddEntry(hd1,\"lower p_{t} D-daughter p_{t}\")\n",
    "legend.AddEntry(hd2,\"higher p_{t} D-daughter p_{t}\")\n",
    "legend.AddEntry(hd3,\"final state B-daughter p_{t}\")\n",
    "ROOT.gStyle.SetLegendTextSize(0.05)\n",
    "legend.Draw()\n",
    "c0.Draw()\n",
    "c0.SaveAs(name+\"/pt_reco_distributions.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1fe93396",
   "metadata": {},
   "outputs": [],
   "source": [
    "c0=TCanvas(\"c0\",\"eta reco distributions\",200,10,700,500)\n",
    "c0.cd()\n",
    "hd1=f[\"d1_eta\"]\n",
    "hd2=f[\"d2_eta\"]\n",
    "hd3=f[\"d3_eta\"]\n",
    "print(hd1.Integral())\n",
    "print(hd2.Integral())\n",
    "print(hd3.Integral())\n",
    "hd1.SetLineColor(2)\n",
    "hd2.SetLineColor(4)\n",
    "hd3.SetLineColor(6)\n",
    "hd1.SetStats(0) \n",
    "hd1.Draw()\n",
    "hd2.Draw(\"same\")\n",
    "hd3.Draw(\"same\")\n",
    "hd1.SetTitle(\"(\"+decay+\")\"+\"Eta reco distributions\")\n",
    "hd1.GetXaxis().SetTitle(\"Eta\")\n",
    "hd1.GetYaxis().SetTitle(\"entries\")\n",
    "legend=TLegend(0.325, 0.2, 0.675, 0.4)\n",
    "legend.AddEntry(hd1,\"lower pt D-daughter eta\")\n",
    "legend.AddEntry(hd2,\"higher pt D-daughter eta\")\n",
    "legend.AddEntry(hd3,\"final state B-daughter eta\")\n",
    "ROOT.gStyle.SetLegendTextSize(0.05)\n",
    "legend.Draw()\n",
    "c0.Draw()\n",
    "c0.SaveAs(name+\"/eta_reco_distributions.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c334a33a",
   "metadata": {},
   "outputs": [],
   "source": [
    "c0=TCanvas(\"c0\",\"phi reco distributions\",200,10,700,500)\n",
    "c0.cd()\n",
    "hd1=f[\"d1_phi\"]\n",
    "hd2=f[\"d2_phi\"]\n",
    "hd3=f[\"d3_phi\"]\n",
    "print(hd1.Integral())\n",
    "print(hd2.Integral())\n",
    "print(hd3.Integral())\n",
    "hd1.SetLineColor(2)\n",
    "hd2.SetLineColor(4)\n",
    "hd3.SetLineColor(6)\n",
    "hd1.SetStats(0) \n",
    "hd1.Draw()\n",
    "hd2.Draw(\"same\")\n",
    "hd3.Draw(\"same\")\n",
    "hd1.SetTitle(\"(\"+decay+\")\"+\"Phi reco distributions\")\n",
    "hd1.GetXaxis().SetTitle(\"phi [rad]\")\n",
    "hd1.GetYaxis().SetTitle(\"entries\")\n",
    "legend=TLegend(0.325, 0.2, 0.675, 0.4)\n",
    "legend.AddEntry(hd1,\"lower pt D-daughter phi\")\n",
    "legend.AddEntry(hd2,\"higher pt D-daughter phi\")\n",
    "legend.AddEntry(hd3,\"final state B-daughter phi\")\n",
    "ROOT.gStyle.SetLegendTextSize(0.05)\n",
    "legend.Draw()\n",
    "c0.Draw()\n",
    "c0.SaveAs(name+\"/phi_reco_distributions.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f2d0d3d",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = ROOT.TCanvas(\"c\", \"D invariant mass\", 700, 500)\n",
    "hist = f[\"D_M\"]\n",
    "hist.SetLineColor(ROOT.kBlue)\n",
    "hist.SetTitle(\"(\"+decay+\")\"+\"D invariant mass; Invariant mass [GeV/c^2]; Entries\")\n",
    "hist.Draw()\n",
    "c.SaveAs(name+\"/D_M.png\")\n",
    "c.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b7d34d93",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = ROOT.TCanvas(\"c\", \"B invariant mass\", 700, 500)\n",
    "hist = f[\"B_M\"]\n",
    "hist.SetLineColor(ROOT.kBlue)\n",
    "hist.SetTitle(\"(\"+decay+\")\"+\"B invariant mass; Invariant mass [GeV/c^2]; Entries\")\n",
    "hist.Draw()\n",
    "c.SaveAs(name+\"/B_M.png\")\n",
    "c.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "969b2208",
   "metadata": {},
   "outputs": [],
   "source": [
    "from ROOT import TLine\n",
    "c = ROOT.TCanvas(\"c\", \"dr distribution d1\", 700, 500)\n",
    "hist = f[\"d1_dr\"]\n",
    "hist.SetLineColor(ROOT.kBlue)\n",
    "hist.SetTitle(\"(\"+decay+\")\"+\"lower pt D-daughter dr distribution;Angular Distance; Entries\")\n",
    "hist.Draw()\n",
    "x_line = 0.01\n",
    "y_min = hist.GetMinimum()\n",
    "y_max = hist.GetMaximum()\n",
    "line = TLine(x_line, y_min, x_line, y_max)\n",
    "line.SetLineColor(ROOT.kRed)\n",
    "line.SetLineWidth(2)\n",
    "line.SetLineStyle(2)\n",
    "line.Draw(\"same\")\n",
    "c.SaveAs(name+\"/d1_dr.png\")\n",
    "c.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d3afd8e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = ROOT.TCanvas(\"c\", \"dr distribution d2\", 700, 500)\n",
    "hist = f[\"d2_dr\"]\n",
    "hist.SetLineColor(ROOT.kBlue)\n",
    "hist.SetTitle(\"(\"+decay+\")\"+\"higher pt D-daughter dr distribution;Angular Distance; Entries\")\n",
    "hist.Draw()\n",
    "x_line = 0.01\n",
    "y_min = hist.GetMinimum()\n",
    "y_max = hist.GetMaximum()\n",
    "line = TLine(x_line, y_min, x_line, y_max)\n",
    "line.SetLineColor(ROOT.kRed)\n",
    "line.SetLineWidth(2)\n",
    "line.SetLineStyle(2)\n",
    "line.Draw(\"same\")\n",
    "c.SaveAs(name+\"/d2_dr.png\")\n",
    "c.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e7ca77d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = ROOT.TCanvas(\"c\", \"dr distribution d3\", 700, 500)\n",
    "hist = f[\"d3_dr\"]\n",
    "hist.SetLineColor(ROOT.kBlue)\n",
    "hist.SetTitle(\"(\"+decay+\")\"+\"final state B-daughter dr distribution;Angular Distance; Entries\")\n",
    "hist.Draw()\n",
    "x_line = 0.01\n",
    "y_min = hist.GetMinimum()\n",
    "y_max = hist.GetMaximum()\n",
    "line = TLine(x_line, y_min, x_line, y_max)\n",
    "line.SetLineColor(ROOT.kRed)\n",
    "line.SetLineWidth(2)\n",
    "line.SetLineStyle(2)\n",
    "line.Draw(\"same\")\n",
    "c.SaveAs(name+\"/d3_dr.png\")\n",
    "c.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d0f108d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = ROOT.TCanvas(\"c\", \"dr distribution D\", 700, 500)\n",
    "hist = f[\"D_dr\"]\n",
    "hist.SetLineColor(ROOT.kBlue)\n",
    "hist.SetTitle(\"(\"+decay+\")\"+\"D_dr;Angular Distance; Entries\")\n",
    "hist.Draw()\n",
    "c.SaveAs(name+\"/D_dr.png\")\n",
    "c.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9282636f",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = ROOT.TCanvas(\"c\", \"dr distribution B\", 700, 500)\n",
    "hist = f[\"B_dr\"]\n",
    "hist.SetLineColor(ROOT.kBlue)\n",
    "hist.SetTitle(\"(\"+decay+\")\"+\"B_dr;Angular Distance; Entries\")\n",
    "hist.Draw()\n",
    "c.SaveAs(name+\"/B_dr.png\")\n",
    "c.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4c43e44e",
   "metadata": {},
   "outputs": [],
   "source": [
    "c0=TCanvas(\"c0\",\"pt gen distributions\",200,10,700,500)\n",
    "c0.cd()\n",
    "hd1=f[\"d1_den_pt\"]\n",
    "hd2=f[\"d2_den_pt\"]\n",
    "hd3=f[\"d3_den_pt\"]\n",
    "print(hd1.Integral())\n",
    "print(hd2.Integral())\n",
    "print(hd3.Integral())\n",
    "hd1.SetLineColor(2)\n",
    "hd2.SetLineColor(4)\n",
    "hd3.SetLineColor(6)\n",
    "hd1.SetStats(0) \n",
    "hd1.Draw()\n",
    "hd2.Draw(\"same\")\n",
    "hd3.Draw(\"same\")\n",
    "hd1.SetTitle(\"(\"+decay+\")\"+\"Pt gen distributions\")\n",
    "hd1.GetXaxis().SetTitle(\"p_{t} [Gev/c]\")\n",
    "hd1.GetYaxis().SetTitle(\"entries\")\n",
    "legend=TLegend(0.5,0.8,0.85,0.6)\n",
    "legend.AddEntry(hd1,\"lower p_{t} D-daughter p_{t}\")\n",
    "legend.AddEntry(hd2,\"higher p_{t} D-daughter p_{t}\")\n",
    "legend.AddEntry(hd3,\"final state B-daughter p_{t}\")\n",
    "ROOT.gStyle.SetLegendTextSize(0.05)\n",
    "legend.Draw()\n",
    "c0.Draw()\n",
    "c0.SaveAs(name+\"/pt_gen_distributions.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cb0464cf",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "c0=TCanvas(\"c0\",\"phi gen distributions\",200,10,700,500)\n",
    "c0.cd()\n",
    "hd1=f[\"d1_gen_phi\"]\n",
    "hd2=f[\"d2_gen_phi\"]\n",
    "hd3=f[\"d3_gen_phi\"]\n",
    "print(hd1.Integral())\n",
    "print(hd2.Integral())\n",
    "print(hd3.Integral())\n",
    "hd1.SetLineColor(2)\n",
    "hd2.SetLineColor(4)\n",
    "hd3.SetLineColor(6)\n",
    "hd1.SetStats(0) \n",
    "hd1.Draw()\n",
    "hd2.Draw(\"same\")\n",
    "hd3.Draw(\"same\")\n",
    "hd1.SetTitle(\"(\"+decay+\")\"+\"Phi gen distributions\")\n",
    "hd1.GetXaxis().SetTitle(\"phi [rad]\")\n",
    "hd1.GetYaxis().SetTitle(\"entries\")\n",
    "legend=TLegend(0.325, 0.2, 0.675, 0.4)\n",
    "legend.AddEntry(hd1,\"lower pt D-daughter phi\")\n",
    "legend.AddEntry(hd2,\"higher pt D-daughter phi\")\n",
    "legend.AddEntry(hd3,\"final state B-daughter phi\")\n",
    "ROOT.gStyle.SetLegendTextSize(0.05)\n",
    "legend.Draw()\n",
    "c0.Draw()\n",
    "c0.SaveAs(name+\"/phi_gen_distributions.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "31d39874",
   "metadata": {},
   "outputs": [],
   "source": [
    "c0=TCanvas(\"c0\",\"eta gen distributions\",200,10,700,500)\n",
    "c0.cd()\n",
    "hd1=f[\"d1_gen_eta\"]\n",
    "hd2=f[\"d2_gen_eta\"]\n",
    "hd3=f[\"d3_gen_eta\"]\n",
    "print(hd1.Integral())\n",
    "print(hd2.Integral())\n",
    "print(hd3.Integral())\n",
    "hd1.SetLineColor(2)\n",
    "hd2.SetLineColor(4)\n",
    "hd3.SetLineColor(6)\n",
    "hd1.SetStats(0) \n",
    "hd1.Draw()\n",
    "hd2.Draw(\"same\")\n",
    "hd3.Draw(\"same\")\n",
    "hd1.SetTitle(\"(\"+decay+\")\"+\"Eta gen distributions\")\n",
    "hd1.GetXaxis().SetTitle(\"Eta\")\n",
    "hd1.GetYaxis().SetTitle(\"entries\")\n",
    "legend=TLegend(0.325, 0.2, 0.675, 0.4)\n",
    "legend.AddEntry(hd1,\"lower pt D-daughter eta\")\n",
    "legend.AddEntry(hd2,\"higher pt D-daughter eta\")\n",
    "legend.AddEntry(hd3,\"final state B-daughter eta\")\n",
    "ROOT.gStyle.SetLegendTextSize(0.05)\n",
    "legend.Draw()\n",
    "c0.Draw()\n",
    "c0.SaveAs(name+\"/eta_gen_distributions.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9c32b9ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = ROOT.TCanvas(\"c\", \"eta_phi_distribution_reco_final_state_1\", 700, 500)\n",
    "hist = f[\"eta_phi_reco_final_state_1\"]\n",
    "hist.SetTitle(\"(\"+decay+\")\"+\"eta_phi_distribution_reco_lower_pt_D-daughter; Eta; Phi\")\n",
    "hist.Draw()\n",
    "c.SaveAs(name+\"/eta_phi_distribution_reco_final_state_1.png\")\n",
    "c.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c64c1983",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = ROOT.TCanvas(\"c\", \"eta_phi_distribution_reco_final_state_2\", 700, 500)\n",
    "hist = f[\"eta_phi_reco_final_state_2\"]\n",
    "hist.SetTitle(\"(\"+decay+\")\"+\"eta_phi_distribution_reco_higher_pt_D-daughter; Eta; Phi\")\n",
    "hist.Draw()\n",
    "c.SaveAs(name+\"/eta_phi_distribution_reco_final_state_2.png\")\n",
    "c.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6494cf98",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = ROOT.TCanvas(\"c\", \"eta_phi_distribution_reco_final_state_3\", 700, 500)\n",
    "hist = f[\"eta_phi_reco_final_state_3\"]\n",
    "hist.SetTitle(\"(\"+decay+\")\"+\"eta_phi_distribution_reco_final_state_B-daughter; Eta; Phi\")\n",
    "hist.Draw()\n",
    "c.SaveAs(name+\"/eta_phi_distribution_reco_final_state_3.png\")\n",
    "c.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3668b4e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = ROOT.TCanvas(\"c\", \"eta_phi_distribution_gen_final_state_1\", 700, 500)\n",
    "hist = f[\"eta_phi_gen_final_state_1\"]\n",
    "hist.SetTitle(\"(\"+decay+\")\"+\"eta_phi_distribution_reco_lower_pt_D-daughter; Eta; Phi\")\n",
    "hist.Draw()\n",
    "c.SaveAs(name+\"/eta_phi_distribution_reco_final_state_1.png\")\n",
    "c.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7276f3fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = ROOT.TCanvas(\"c\", \"eta_phi_distribution_gen_final_state_2\", 700, 500)\n",
    "hist = f[\"eta_phi_gen_final_state_2\"]\n",
    "hist.SetTitle(\"(\"+decay+\")\"+\"eta_phi_distribution_gen_higher_pt_D-daughter;Eta; Phi\")\n",
    "hist.Draw()\n",
    "c.SaveAs(name+\"/eta_phi_distribution_gen_final_state_2.png\")\n",
    "c.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "128af585",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = ROOT.TCanvas(\"c\", \"eta_phi_distribution_gen_final_state_3\", 700, 500)\n",
    "hist = f[\"eta_phi_gen_final_state_3\"]\n",
    "hist.SetTitle(\"(\"+decay+\")\"+\"eta_phi_distribution_gen_final_state_B-daughter; Eta; Phi\")\n",
    "hist.Draw()\n",
    "c.SaveAs(name+\"/eta_phi_distribution_gen_final_state_3.png\")\n",
    "c.Draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b20c733c",
   "metadata": {},
   "outputs": [],
   "source": [
    "c0=TCanvas(\"c0\",\"B pt distribution, reco vs gen\",200,10,700,500)\n",
    "c0.cd()\n",
    "hd1=f[\"B_den_pt\"]\n",
    "hd2=f[\"B_num_pt\"]\n",
    "hd1.SetLineColor(2)\n",
    "hd2.SetLineColor(4)\n",
    "hd1.SetStats(0) \n",
    "hd1.Draw()\n",
    "hd2.Draw(\"same\")\n",
    "hd1.SetTitle(\"(\"+decay+\")\"+\"B pt distribution, reco vs gen\")\n",
    "hd1.GetXaxis().SetTitle(\"pt [Gev]\")\n",
    "hd1.GetYaxis().SetTitle(\"entries\")\n",
    "legend=TLegend(0.7,0.8,0.85,0.6)\n",
    "legend.AddEntry(hd1,\"gen B\")\n",
    "legend.AddEntry(hd2,\"matched gen B\")\n",
    "ROOT.gStyle.SetLegendTextSize(0.05)\n",
    "legend.Draw()\n",
    "c0.Draw()\n",
    "c0.SaveAs(name+\"/B_pt_reco_vs_gen.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ff5aba2e",
   "metadata": {},
   "outputs": [],
   "source": [
    "c0=TCanvas(\"c0\",\"D pt distribution, reco vs gen\",200,10,700,500)\n",
    "c0.cd()\n",
    "hd1=f[\"D_den_pt\"]\n",
    "hd2=f[\"D_num_pt\"]\n",
    "hd1.SetLineColor(2)\n",
    "hd2.SetLineColor(4)\n",
    "hd1.SetStats(0) \n",
    "hd1.Draw()\n",
    "hd2.Draw(\"same\")\n",
    "hd1.SetTitle(\"(\"+decay+\")\"+\"D pt distribution, reco vs gen\")\n",
    "hd1.GetXaxis().SetTitle(\"pt [Gev]\")\n",
    "hd1.GetYaxis().SetTitle(\"entries\")\n",
    "legend=TLegend(0.7,0.8,0.85,0.6)\n",
    "legend.AddEntry(hd1,\"gen D\")\n",
    "legend.AddEntry(hd2,\"matched gen D\")\n",
    "ROOT.gStyle.SetLegendTextSize(0.05)\n",
    "legend.Draw()\n",
    "c0.Draw()\n",
    "c0.SaveAs(name+\"/D_pt_reco_vs_gen.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "26e9878b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8cdf972e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3e46159f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d3151dc5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "26b546bf",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4548724c",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "c_eff = TCanvas(\"c_eff\", \"d1 Efficiency d\", 700, 500)\n",
    "num = f[\"d1_num_d\"]\n",
    "den = f[\"d1_den_d\"]\n",
    "eff = ROOT.TEfficiency(num, den)\n",
    "eff.SetTitle(\"Efficiency d1 vs d; d [cm]; Efficiency\")\n",
    "eff.Draw()\n",
    "c_eff.SaveAs(name+\"/efficiency_d1_vs_d.png\")\n",
    "c_eff.Draw()\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "189ca94d",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "c_eff = TCanvas(\"c_eff\", \"d2 Efficiency d\", 700, 500)\n",
    "num = f[\"d2_num_d\"]\n",
    "den = f[\"d2_den_d\"]\n",
    "eff = ROOT.TEfficiency(num, den)\n",
    "eff.SetTitle(\"Efficiency d2 vs d; d [cm]; Efficiency\")\n",
    "eff.Draw()\n",
    "c_eff.SaveAs(name+\"/efficiency_d2_vs_d.png\")\n",
    "c_eff.Draw()\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8673a634",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "c_eff = TCanvas(\"c_eff\", \"d3 Efficiency d\", 700, 500)\n",
    "num = f[\"d3_num_d\"]\n",
    "den = f[\"d3_den_d\"]\n",
    "eff = ROOT.TEfficiency(num, den)\n",
    "eff.SetTitle(\"Efficiency d3 vs d; d [cm]; Efficiency\")\n",
    "eff.Draw()\n",
    "c_eff.SaveAs(name+\"/efficiency_d3_vs_d.png\")\n",
    "c_eff.Draw()\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b52e180f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "44c8182d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d7359fc9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "31c4e5dc",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "@webio": {
   "lastCommId": null,
   "lastKernelId": null
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
